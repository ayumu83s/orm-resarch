// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testFilmCategories(t *testing.T) {
	t.Parallel()

	query := FilmCategories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testFilmCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = filmCategory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = FilmCategories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FilmCategorySlice{filmCategory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testFilmCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := FilmCategoryExists(tx, filmCategory.FilmID, filmCategory.CategoryID)
	if err != nil {
		t.Errorf("Unable to check if FilmCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FilmCategoryExistsG to return true, but got false.")
	}
}
func testFilmCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	filmCategoryFound, err := FindFilmCategory(tx, filmCategory.FilmID, filmCategory.CategoryID)
	if err != nil {
		t.Error(err)
	}

	if filmCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testFilmCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = FilmCategories(tx).Bind(filmCategory); err != nil {
		t.Error(err)
	}
}

func testFilmCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := FilmCategories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFilmCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategoryOne := &FilmCategory{}
	filmCategoryTwo := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategoryOne, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, filmCategoryTwo, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = filmCategoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := FilmCategories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFilmCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	filmCategoryOne := &FilmCategory{}
	filmCategoryTwo := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategoryOne, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, filmCategoryTwo, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = filmCategoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func filmCategoryBeforeInsertHook(e boil.Executor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryAfterInsertHook(e boil.Executor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryAfterSelectHook(e boil.Executor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryBeforeUpdateHook(e boil.Executor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryAfterUpdateHook(e boil.Executor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryBeforeDeleteHook(e boil.Executor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryAfterDeleteHook(e boil.Executor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryBeforeUpsertHook(e boil.Executor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryAfterUpsertHook(e boil.Executor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func testFilmCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &FilmCategory{}
	o := &FilmCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FilmCategory object: %s", err)
	}

	AddFilmCategoryHook(boil.BeforeInsertHook, filmCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	filmCategoryBeforeInsertHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.AfterInsertHook, filmCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	filmCategoryAfterInsertHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.AfterSelectHook, filmCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	filmCategoryAfterSelectHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.BeforeUpdateHook, filmCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	filmCategoryBeforeUpdateHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.AfterUpdateHook, filmCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	filmCategoryAfterUpdateHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.BeforeDeleteHook, filmCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	filmCategoryBeforeDeleteHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.AfterDeleteHook, filmCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	filmCategoryAfterDeleteHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.BeforeUpsertHook, filmCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	filmCategoryBeforeUpsertHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.AfterUpsertHook, filmCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	filmCategoryAfterUpsertHooks = []FilmCategoryHook{}
}
func testFilmCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFilmCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx, filmCategoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFilmCategoryToOneCategoryUsingCategory(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local FilmCategory
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CategoryID = foreign.CategoryID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.CategoryID != foreign.CategoryID {
		t.Errorf("want: %v, got %v", foreign.CategoryID, check.CategoryID)
	}

	slice := FilmCategorySlice{&local}
	if err = local.L.LoadCategory(tx, false, (*[]*FilmCategory)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFilmCategoryToOneFilmUsingFilm(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local FilmCategory
	var foreign Film

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, filmDBTypes, false, filmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Film struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.FilmID = foreign.FilmID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Film(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.FilmID != foreign.FilmID {
		t.Errorf("want: %v, got %v", foreign.FilmID, check.FilmID)
	}

	slice := FilmCategorySlice{&local}
	if err = local.L.LoadFilm(tx, false, (*[]*FilmCategory)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Film = nil
	if err = local.L.LoadFilm(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFilmCategoryToOneSetOpCategoryUsingCategory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a FilmCategory
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, filmCategoryDBTypes, false, strmangle.SetComplement(filmCategoryPrimaryKeyColumns, filmCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetCategory(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FilmCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CategoryID != x.CategoryID {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		if exists, err := FilmCategoryExists(tx, a.FilmID, a.CategoryID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testFilmCategoryToOneSetOpFilmUsingFilm(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a FilmCategory
	var b, c Film

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, filmCategoryDBTypes, false, strmangle.SetComplement(filmCategoryPrimaryKeyColumns, filmCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Film{&b, &c} {
		err = a.SetFilm(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Film != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FilmCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FilmID != x.FilmID {
			t.Error("foreign key was wrong value", a.FilmID)
		}

		if exists, err := FilmCategoryExists(tx, a.FilmID, a.CategoryID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testFilmCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = filmCategory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testFilmCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FilmCategorySlice{filmCategory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testFilmCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := FilmCategories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	filmCategoryDBTypes = map[string]string{`CategoryID`: `tinyint`, `FilmID`: `smallint`, `LastUpdate`: `timestamp`}
	_                   = bytes.MinRead
)

func testFilmCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(filmCategoryColumns) == len(filmCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	if err = filmCategory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testFilmCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(filmCategoryColumns) == len(filmCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	filmCategory := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, filmCategory, filmCategoryDBTypes, true, filmCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(filmCategoryColumns, filmCategoryPrimaryKeyColumns) {
		fields = filmCategoryColumns
	} else {
		fields = strmangle.SetComplement(
			filmCategoryColumns,
			filmCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(filmCategory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := FilmCategorySlice{filmCategory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testFilmCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(filmCategoryColumns) == len(filmCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	filmCategory := FilmCategory{}
	if err = randomize.Struct(seed, &filmCategory, filmCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmCategory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert FilmCategory: %s", err)
	}

	count, err := FilmCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &filmCategory, filmCategoryDBTypes, false, filmCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	if err = filmCategory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert FilmCategory: %s", err)
	}

	count, err = FilmCategories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
