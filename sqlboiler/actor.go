// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// Actor is an object representing the database table.
type Actor struct {
	ActorID    uint16    `boil:"actor_id" json:"actor_id" toml:"actor_id" yaml:"actor_id"`
	FirstName  string    `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName   string    `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	LastUpdate time.Time `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *actorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L actorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActorColumns = struct {
	ActorID    string
	FirstName  string
	LastName   string
	LastUpdate string
}{
	ActorID:    "actor_id",
	FirstName:  "first_name",
	LastName:   "last_name",
	LastUpdate: "last_update",
}

// actorR is where relationships are stored.
type actorR struct {
	FilmActors FilmActorSlice
}

// actorL is where Load methods for each relationship are stored.
type actorL struct{}

var (
	actorColumns               = []string{"actor_id", "first_name", "last_name", "last_update"}
	actorColumnsWithoutDefault = []string{"first_name", "last_name"}
	actorColumnsWithDefault    = []string{"actor_id", "last_update"}
	actorPrimaryKeyColumns     = []string{"actor_id"}
)

type (
	// ActorSlice is an alias for a slice of pointers to Actor.
	// This should generally be used opposed to []Actor.
	ActorSlice []*Actor
	// ActorHook is the signature for custom Actor hook methods
	ActorHook func(boil.Executor, *Actor) error

	actorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	actorType                 = reflect.TypeOf(&Actor{})
	actorMapping              = queries.MakeStructMapping(actorType)
	actorPrimaryKeyMapping, _ = queries.BindMapping(actorType, actorMapping, actorPrimaryKeyColumns)
	actorInsertCacheMut       sync.RWMutex
	actorInsertCache          = make(map[string]insertCache)
	actorUpdateCacheMut       sync.RWMutex
	actorUpdateCache          = make(map[string]updateCache)
	actorUpsertCacheMut       sync.RWMutex
	actorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var actorBeforeInsertHooks []ActorHook
var actorBeforeUpdateHooks []ActorHook
var actorBeforeDeleteHooks []ActorHook
var actorBeforeUpsertHooks []ActorHook

var actorAfterInsertHooks []ActorHook
var actorAfterSelectHooks []ActorHook
var actorAfterUpdateHooks []ActorHook
var actorAfterDeleteHooks []ActorHook
var actorAfterUpsertHooks []ActorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Actor) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range actorBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Actor) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range actorBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Actor) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range actorBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Actor) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range actorBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Actor) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range actorAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Actor) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range actorAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Actor) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range actorAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Actor) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range actorAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Actor) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range actorAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActorHook registers your hook function for all future operations.
func AddActorHook(hookPoint boil.HookPoint, actorHook ActorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		actorBeforeInsertHooks = append(actorBeforeInsertHooks, actorHook)
	case boil.BeforeUpdateHook:
		actorBeforeUpdateHooks = append(actorBeforeUpdateHooks, actorHook)
	case boil.BeforeDeleteHook:
		actorBeforeDeleteHooks = append(actorBeforeDeleteHooks, actorHook)
	case boil.BeforeUpsertHook:
		actorBeforeUpsertHooks = append(actorBeforeUpsertHooks, actorHook)
	case boil.AfterInsertHook:
		actorAfterInsertHooks = append(actorAfterInsertHooks, actorHook)
	case boil.AfterSelectHook:
		actorAfterSelectHooks = append(actorAfterSelectHooks, actorHook)
	case boil.AfterUpdateHook:
		actorAfterUpdateHooks = append(actorAfterUpdateHooks, actorHook)
	case boil.AfterDeleteHook:
		actorAfterDeleteHooks = append(actorAfterDeleteHooks, actorHook)
	case boil.AfterUpsertHook:
		actorAfterUpsertHooks = append(actorAfterUpsertHooks, actorHook)
	}
}

// OneP returns a single actor record from the query, and panics on error.
func (q actorQuery) OneP() *Actor {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single actor record from the query.
func (q actorQuery) One() (*Actor, error) {
	o := &Actor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for actor")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Actor records from the query, and panics on error.
func (q actorQuery) AllP() ActorSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Actor records from the query.
func (q actorQuery) All() (ActorSlice, error) {
	var o []*Actor

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Actor slice")
	}

	if len(actorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Actor records in the query, and panics on error.
func (q actorQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Actor records in the query.
func (q actorQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count actor rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q actorQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q actorQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if actor exists")
	}

	return count > 0, nil
}

// FilmActorsG retrieves all the film_actor's film actor.
func (o *Actor) FilmActorsG(mods ...qm.QueryMod) filmActorQuery {
	return o.FilmActors(boil.GetDB(), mods...)
}

// FilmActors retrieves all the film_actor's film actor with an executor.
func (o *Actor) FilmActors(exec boil.Executor, mods ...qm.QueryMod) filmActorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`film_actor`.`actor_id`=?", o.ActorID),
	)

	query := FilmActors(exec, queryMods...)
	queries.SetFrom(query.Query, "`film_actor`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`film_actor`.*"})
	}

	return query
}

// LoadFilmActors allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (actorL) LoadFilmActors(e boil.Executor, singular bool, maybeActor interface{}) error {
	var slice []*Actor
	var object *Actor

	count := 1
	if singular {
		object = maybeActor.(*Actor)
	} else {
		slice = *maybeActor.(*[]*Actor)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &actorR{}
		}
		args[0] = object.ActorID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &actorR{}
			}
			args[i] = obj.ActorID
		}
	}

	query := fmt.Sprintf(
		"select * from `film_actor` where `actor_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load film_actor")
	}
	defer results.Close()

	var resultSlice []*FilmActor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice film_actor")
	}

	if len(filmActorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FilmActors = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ActorID == foreign.ActorID {
				local.R.FilmActors = append(local.R.FilmActors, foreign)
				break
			}
		}
	}

	return nil
}

// AddFilmActorsG adds the given related objects to the existing relationships
// of the actor, optionally inserting them as new records.
// Appends related to o.R.FilmActors.
// Sets related.R.Actor appropriately.
// Uses the global database handle.
func (o *Actor) AddFilmActorsG(insert bool, related ...*FilmActor) error {
	return o.AddFilmActors(boil.GetDB(), insert, related...)
}

// AddFilmActorsP adds the given related objects to the existing relationships
// of the actor, optionally inserting them as new records.
// Appends related to o.R.FilmActors.
// Sets related.R.Actor appropriately.
// Panics on error.
func (o *Actor) AddFilmActorsP(exec boil.Executor, insert bool, related ...*FilmActor) {
	if err := o.AddFilmActors(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFilmActorsGP adds the given related objects to the existing relationships
// of the actor, optionally inserting them as new records.
// Appends related to o.R.FilmActors.
// Sets related.R.Actor appropriately.
// Uses the global database handle and panics on error.
func (o *Actor) AddFilmActorsGP(insert bool, related ...*FilmActor) {
	if err := o.AddFilmActors(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFilmActors adds the given related objects to the existing relationships
// of the actor, optionally inserting them as new records.
// Appends related to o.R.FilmActors.
// Sets related.R.Actor appropriately.
func (o *Actor) AddFilmActors(exec boil.Executor, insert bool, related ...*FilmActor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ActorID = o.ActorID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `film_actor` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"actor_id"}),
				strmangle.WhereClause("`", "`", 0, filmActorPrimaryKeyColumns),
			)
			values := []interface{}{o.ActorID, rel.ActorID, rel.FilmID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ActorID = o.ActorID
		}
	}

	if o.R == nil {
		o.R = &actorR{
			FilmActors: related,
		}
	} else {
		o.R.FilmActors = append(o.R.FilmActors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &filmActorR{
				Actor: o,
			}
		} else {
			rel.R.Actor = o
		}
	}
	return nil
}

// ActorsG retrieves all records.
func ActorsG(mods ...qm.QueryMod) actorQuery {
	return Actors(boil.GetDB(), mods...)
}

// Actors retrieves all the records using an executor.
func Actors(exec boil.Executor, mods ...qm.QueryMod) actorQuery {
	mods = append(mods, qm.From("`actor`"))
	return actorQuery{NewQuery(exec, mods...)}
}

// FindActorG retrieves a single record by ID.
func FindActorG(actorID uint16, selectCols ...string) (*Actor, error) {
	return FindActor(boil.GetDB(), actorID, selectCols...)
}

// FindActorGP retrieves a single record by ID, and panics on error.
func FindActorGP(actorID uint16, selectCols ...string) *Actor {
	retobj, err := FindActor(boil.GetDB(), actorID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindActor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActor(exec boil.Executor, actorID uint16, selectCols ...string) (*Actor, error) {
	actorObj := &Actor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `actor` where `actor_id`=?", sel,
	)

	q := queries.Raw(exec, query, actorID)

	err := q.Bind(actorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from actor")
	}

	return actorObj, nil
}

// FindActorP retrieves a single record by ID with an executor, and panics on error.
func FindActorP(exec boil.Executor, actorID uint16, selectCols ...string) *Actor {
	retobj, err := FindActor(exec, actorID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Actor) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Actor) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Actor) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Actor) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no actor provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actorColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	actorInsertCacheMut.RLock()
	cache, cached := actorInsertCache[key]
	actorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			actorColumns,
			actorColumnsWithDefault,
			actorColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(actorType, actorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(actorType, actorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `actor` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `actor` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `actor` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, actorPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into actor")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ActorID = uint16(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == actorMapping["ActorID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ActorID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for actor")
	}

CacheNoHooks:
	if !cached {
		actorInsertCacheMut.Lock()
		actorInsertCache[key] = cache
		actorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Actor record. See Update for
// whitelist behavior description.
func (o *Actor) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Actor record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Actor) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Actor, and panics on error.
// See Update for whitelist behavior description.
func (o *Actor) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Actor.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Actor) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	actorUpdateCacheMut.RLock()
	cache, cached := actorUpdateCache[key]
	actorUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			actorColumns,
			actorPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("sqlboiler: unable to update actor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `actor` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, actorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(actorType, actorMapping, append(wl, actorPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update actor row")
	}

	if !cached {
		actorUpdateCacheMut.Lock()
		actorUpdateCache[key] = cache
		actorUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q actorQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q actorQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all for actor")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ActorSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ActorSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ActorSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActorSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `actor` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, actorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all in actor slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Actor) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Actor) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Actor) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Actor) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no actor provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	actorUpsertCacheMut.RLock()
	cache, cached := actorUpsertCache[key]
	actorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			actorColumns,
			actorColumnsWithDefault,
			actorColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			actorColumns,
			actorPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert actor, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "actor", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `actor` WHERE `actor_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(actorType, actorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(actorType, actorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for actor")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ActorID = uint16(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == actorMapping["ActorID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ActorID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for actor")
	}

CacheNoHooks:
	if !cached {
		actorUpsertCacheMut.Lock()
		actorUpsertCache[key] = cache
		actorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Actor record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Actor) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Actor record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Actor) DeleteG() error {
	if o == nil {
		return errors.New("sqlboiler: no Actor provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Actor record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Actor) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Actor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Actor) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Actor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), actorPrimaryKeyMapping)
	sql := "DELETE FROM `actor` WHERE `actor_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete from actor")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q actorQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q actorQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("sqlboiler: no actorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from actor")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ActorSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ActorSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("sqlboiler: no Actor slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ActorSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActorSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Actor slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(actorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `actor` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, actorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from actor slice")
	}

	if len(actorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Actor) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Actor) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Actor) ReloadG() error {
	if o == nil {
		return errors.New("sqlboiler: no Actor provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Actor) Reload(exec boil.Executor) error {
	ret, err := FindActor(exec, o.ActorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ActorSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ActorSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActorSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("sqlboiler: empty ActorSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActorSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	actors := ActorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `actor`.* FROM `actor` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, actorPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&actors)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in ActorSlice")
	}

	*o = actors

	return nil
}

// ActorExists checks if the Actor row exists.
func ActorExists(exec boil.Executor, actorID uint16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `actor` where `actor_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, actorID)
	}

	row := exec.QueryRow(sql, actorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if actor exists")
	}

	return exists, nil
}

// ActorExistsG checks if the Actor row exists.
func ActorExistsG(actorID uint16) (bool, error) {
	return ActorExists(boil.GetDB(), actorID)
}

// ActorExistsGP checks if the Actor row exists. Panics on error.
func ActorExistsGP(actorID uint16) bool {
	e, err := ActorExists(boil.GetDB(), actorID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ActorExistsP checks if the Actor row exists. Panics on error.
func ActorExistsP(exec boil.Executor, actorID uint16) bool {
	e, err := ActorExists(exec, actorID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
