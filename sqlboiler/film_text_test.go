// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testFilmTexts(t *testing.T) {
	t.Parallel()

	query := FilmTexts(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testFilmTextsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = filmText.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmTextsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = FilmTexts(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := FilmTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmTextsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FilmTextSlice{filmText}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testFilmTextsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := FilmTextExists(tx, filmText.FilmID)
	if err != nil {
		t.Errorf("Unable to check if FilmText exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FilmTextExistsG to return true, but got false.")
	}
}
func testFilmTextsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	filmTextFound, err := FindFilmText(tx, filmText.FilmID)
	if err != nil {
		t.Error(err)
	}

	if filmTextFound == nil {
		t.Error("want a record, got nil")
	}
}
func testFilmTextsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = FilmTexts(tx).Bind(filmText); err != nil {
		t.Error(err)
	}
}

func testFilmTextsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := FilmTexts(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFilmTextsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmTextOne := &FilmText{}
	filmTextTwo := &FilmText{}
	if err = randomize.Struct(seed, filmTextOne, filmTextDBTypes, false, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}
	if err = randomize.Struct(seed, filmTextTwo, filmTextDBTypes, false, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmTextOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = filmTextTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := FilmTexts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFilmTextsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	filmTextOne := &FilmText{}
	filmTextTwo := &FilmText{}
	if err = randomize.Struct(seed, filmTextOne, filmTextDBTypes, false, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}
	if err = randomize.Struct(seed, filmTextTwo, filmTextDBTypes, false, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmTextOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = filmTextTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func filmTextBeforeInsertHook(e boil.Executor, o *FilmText) error {
	*o = FilmText{}
	return nil
}

func filmTextAfterInsertHook(e boil.Executor, o *FilmText) error {
	*o = FilmText{}
	return nil
}

func filmTextAfterSelectHook(e boil.Executor, o *FilmText) error {
	*o = FilmText{}
	return nil
}

func filmTextBeforeUpdateHook(e boil.Executor, o *FilmText) error {
	*o = FilmText{}
	return nil
}

func filmTextAfterUpdateHook(e boil.Executor, o *FilmText) error {
	*o = FilmText{}
	return nil
}

func filmTextBeforeDeleteHook(e boil.Executor, o *FilmText) error {
	*o = FilmText{}
	return nil
}

func filmTextAfterDeleteHook(e boil.Executor, o *FilmText) error {
	*o = FilmText{}
	return nil
}

func filmTextBeforeUpsertHook(e boil.Executor, o *FilmText) error {
	*o = FilmText{}
	return nil
}

func filmTextAfterUpsertHook(e boil.Executor, o *FilmText) error {
	*o = FilmText{}
	return nil
}

func testFilmTextsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &FilmText{}
	o := &FilmText{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, filmTextDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FilmText object: %s", err)
	}

	AddFilmTextHook(boil.BeforeInsertHook, filmTextBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	filmTextBeforeInsertHooks = []FilmTextHook{}

	AddFilmTextHook(boil.AfterInsertHook, filmTextAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	filmTextAfterInsertHooks = []FilmTextHook{}

	AddFilmTextHook(boil.AfterSelectHook, filmTextAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	filmTextAfterSelectHooks = []FilmTextHook{}

	AddFilmTextHook(boil.BeforeUpdateHook, filmTextBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	filmTextBeforeUpdateHooks = []FilmTextHook{}

	AddFilmTextHook(boil.AfterUpdateHook, filmTextAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	filmTextAfterUpdateHooks = []FilmTextHook{}

	AddFilmTextHook(boil.BeforeDeleteHook, filmTextBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	filmTextBeforeDeleteHooks = []FilmTextHook{}

	AddFilmTextHook(boil.AfterDeleteHook, filmTextAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	filmTextAfterDeleteHooks = []FilmTextHook{}

	AddFilmTextHook(boil.BeforeUpsertHook, filmTextBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	filmTextBeforeUpsertHooks = []FilmTextHook{}

	AddFilmTextHook(boil.AfterUpsertHook, filmTextAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	filmTextAfterUpsertHooks = []FilmTextHook{}
}
func testFilmTextsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFilmTextsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx, filmTextColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := FilmTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFilmTextsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = filmText.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testFilmTextsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FilmTextSlice{filmText}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testFilmTextsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := FilmTexts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	filmTextDBTypes = map[string]string{`Description`: `text`, `FilmID`: `smallint`, `Title`: `varchar`}
	_               = bytes.MinRead
)

func testFilmTextsUpdate(t *testing.T) {
	t.Parallel()

	if len(filmTextColumns) == len(filmTextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	if err = filmText.Update(tx); err != nil {
		t.Error(err)
	}
}

func testFilmTextsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(filmTextColumns) == len(filmTextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	filmText := &FilmText{}
	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, filmText, filmTextDBTypes, true, filmTextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(filmTextColumns, filmTextPrimaryKeyColumns) {
		fields = filmTextColumns
	} else {
		fields = strmangle.SetComplement(
			filmTextColumns,
			filmTextPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(filmText))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := FilmTextSlice{filmText}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testFilmTextsUpsert(t *testing.T) {
	t.Parallel()

	if len(filmTextColumns) == len(filmTextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	filmText := FilmText{}
	if err = randomize.Struct(seed, &filmText, filmTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmText.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert FilmText: %s", err)
	}

	count, err := FilmTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &filmText, filmTextDBTypes, false, filmTextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmText struct: %s", err)
	}

	if err = filmText.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert FilmText: %s", err)
	}

	count, err = FilmTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
