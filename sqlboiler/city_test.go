// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testCities(t *testing.T) {
	t.Parallel()

	query := Cities(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testCitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = city.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Cities(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Cities(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Cities(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CitySlice{city}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Cities(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testCitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CityExists(tx, city.CityID)
	if err != nil {
		t.Errorf("Unable to check if City exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CityExistsG to return true, but got false.")
	}
}
func testCitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	cityFound, err := FindCity(tx, city.CityID)
	if err != nil {
		t.Error(err)
	}

	if cityFound == nil {
		t.Error("want a record, got nil")
	}
}
func testCitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Cities(tx).Bind(city); err != nil {
		t.Error(err)
	}
}

func testCitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Cities(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cityOne := &City{}
	cityTwo := &City{}
	if err = randomize.Struct(seed, cityOne, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}
	if err = randomize.Struct(seed, cityTwo, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cityOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = cityTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Cities(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cityOne := &City{}
	cityTwo := &City{}
	if err = randomize.Struct(seed, cityOne, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}
	if err = randomize.Struct(seed, cityTwo, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cityOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = cityTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Cities(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func cityBeforeInsertHook(e boil.Executor, o *City) error {
	*o = City{}
	return nil
}

func cityAfterInsertHook(e boil.Executor, o *City) error {
	*o = City{}
	return nil
}

func cityAfterSelectHook(e boil.Executor, o *City) error {
	*o = City{}
	return nil
}

func cityBeforeUpdateHook(e boil.Executor, o *City) error {
	*o = City{}
	return nil
}

func cityAfterUpdateHook(e boil.Executor, o *City) error {
	*o = City{}
	return nil
}

func cityBeforeDeleteHook(e boil.Executor, o *City) error {
	*o = City{}
	return nil
}

func cityAfterDeleteHook(e boil.Executor, o *City) error {
	*o = City{}
	return nil
}

func cityBeforeUpsertHook(e boil.Executor, o *City) error {
	*o = City{}
	return nil
}

func cityAfterUpsertHook(e boil.Executor, o *City) error {
	*o = City{}
	return nil
}

func testCitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &City{}
	o := &City{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize City object: %s", err)
	}

	AddCityHook(boil.BeforeInsertHook, cityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cityBeforeInsertHooks = []CityHook{}

	AddCityHook(boil.AfterInsertHook, cityAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cityAfterInsertHooks = []CityHook{}

	AddCityHook(boil.AfterSelectHook, cityAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cityAfterSelectHooks = []CityHook{}

	AddCityHook(boil.BeforeUpdateHook, cityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cityBeforeUpdateHooks = []CityHook{}

	AddCityHook(boil.AfterUpdateHook, cityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cityAfterUpdateHooks = []CityHook{}

	AddCityHook(boil.BeforeDeleteHook, cityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cityBeforeDeleteHooks = []CityHook{}

	AddCityHook(boil.AfterDeleteHook, cityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cityAfterDeleteHooks = []CityHook{}

	AddCityHook(boil.BeforeUpsertHook, cityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cityBeforeUpsertHooks = []CityHook{}

	AddCityHook(boil.AfterUpsertHook, cityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cityAfterUpsertHooks = []CityHook{}
}
func testCitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Cities(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx, cityColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Cities(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCityToManyAddresses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a City
	var b, c Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, addressDBTypes, false, addressColumnsWithDefault...)
	randomize.Struct(seed, &c, addressDBTypes, false, addressColumnsWithDefault...)

	b.CityID = a.CityID
	c.CityID = a.CityID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	address, err := a.Addresses(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range address {
		if v.CityID == b.CityID {
			bFound = true
		}
		if v.CityID == c.CityID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CitySlice{&a}
	if err = a.L.LoadAddresses(tx, false, (*[]*City)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Addresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Addresses = nil
	if err = a.L.LoadAddresses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Addresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", address)
	}
}

func testCityToManyAddOpAddresses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a City
	var b, c, d, e Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Address{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Address{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAddresses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CityID != first.CityID {
			t.Error("foreign key was wrong value", a.CityID, first.CityID)
		}
		if a.CityID != second.CityID {
			t.Error("foreign key was wrong value", a.CityID, second.CityID)
		}

		if first.R.City != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.City != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Addresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Addresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Addresses(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCityToOneCountryUsingCountry(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local City
	var foreign Country

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CountryID = foreign.CountryID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.CountryID != foreign.CountryID {
		t.Errorf("want: %v, got %v", foreign.CountryID, check.CountryID)
	}

	slice := CitySlice{&local}
	if err = local.L.LoadCountry(tx, false, (*[]*City)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCityToOneSetOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a City
	var b, c Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Country{&b, &c} {
		err = a.SetCountry(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Cities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CountryID != x.CountryID {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CountryID != x.CountryID {
			t.Error("foreign key was wrong value", a.CountryID, x.CountryID)
		}
	}
}
func testCitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = city.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CitySlice{city}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testCitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Cities(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cityDBTypes = map[string]string{`City`: `varchar`, `CityID`: `smallint`, `CountryID`: `smallint`, `LastUpdate`: `timestamp`}
	_           = bytes.MinRead
)

func testCitiesUpdate(t *testing.T) {
	t.Parallel()

	if len(cityColumns) == len(cityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Cities(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	if err = city.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cityColumns) == len(cityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	city := &City{}
	if err = randomize.Struct(seed, city, cityDBTypes, true, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Cities(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, city, cityDBTypes, true, cityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cityColumns, cityPrimaryKeyColumns) {
		fields = cityColumns
	} else {
		fields = strmangle.SetComplement(
			cityColumns,
			cityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(city))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CitySlice{city}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testCitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(cityColumns) == len(cityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	city := City{}
	if err = randomize.Struct(seed, &city, cityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = city.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert City: %s", err)
	}

	count, err := Cities(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &city, cityDBTypes, false, cityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	if err = city.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert City: %s", err)
	}

	count, err = Cities(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
