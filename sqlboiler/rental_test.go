// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testRentals(t *testing.T) {
	t.Parallel()

	query := Rentals(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testRentalsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = rental.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Rentals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRentalsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Rentals(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Rentals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRentalsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RentalSlice{rental}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Rentals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testRentalsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := RentalExists(tx, rental.RentalID)
	if err != nil {
		t.Errorf("Unable to check if Rental exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RentalExistsG to return true, but got false.")
	}
}
func testRentalsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	rentalFound, err := FindRental(tx, rental.RentalID)
	if err != nil {
		t.Error(err)
	}

	if rentalFound == nil {
		t.Error("want a record, got nil")
	}
}
func testRentalsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Rentals(tx).Bind(rental); err != nil {
		t.Error(err)
	}
}

func testRentalsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Rentals(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRentalsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rentalOne := &Rental{}
	rentalTwo := &Rental{}
	if err = randomize.Struct(seed, rentalOne, rentalDBTypes, false, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}
	if err = randomize.Struct(seed, rentalTwo, rentalDBTypes, false, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rentalOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = rentalTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Rentals(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRentalsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rentalOne := &Rental{}
	rentalTwo := &Rental{}
	if err = randomize.Struct(seed, rentalOne, rentalDBTypes, false, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}
	if err = randomize.Struct(seed, rentalTwo, rentalDBTypes, false, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rentalOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = rentalTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Rentals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func rentalBeforeInsertHook(e boil.Executor, o *Rental) error {
	*o = Rental{}
	return nil
}

func rentalAfterInsertHook(e boil.Executor, o *Rental) error {
	*o = Rental{}
	return nil
}

func rentalAfterSelectHook(e boil.Executor, o *Rental) error {
	*o = Rental{}
	return nil
}

func rentalBeforeUpdateHook(e boil.Executor, o *Rental) error {
	*o = Rental{}
	return nil
}

func rentalAfterUpdateHook(e boil.Executor, o *Rental) error {
	*o = Rental{}
	return nil
}

func rentalBeforeDeleteHook(e boil.Executor, o *Rental) error {
	*o = Rental{}
	return nil
}

func rentalAfterDeleteHook(e boil.Executor, o *Rental) error {
	*o = Rental{}
	return nil
}

func rentalBeforeUpsertHook(e boil.Executor, o *Rental) error {
	*o = Rental{}
	return nil
}

func rentalAfterUpsertHook(e boil.Executor, o *Rental) error {
	*o = Rental{}
	return nil
}

func testRentalsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Rental{}
	o := &Rental{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, rentalDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Rental object: %s", err)
	}

	AddRentalHook(boil.BeforeInsertHook, rentalBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	rentalBeforeInsertHooks = []RentalHook{}

	AddRentalHook(boil.AfterInsertHook, rentalAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	rentalAfterInsertHooks = []RentalHook{}

	AddRentalHook(boil.AfterSelectHook, rentalAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	rentalAfterSelectHooks = []RentalHook{}

	AddRentalHook(boil.BeforeUpdateHook, rentalBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	rentalBeforeUpdateHooks = []RentalHook{}

	AddRentalHook(boil.AfterUpdateHook, rentalAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	rentalAfterUpdateHooks = []RentalHook{}

	AddRentalHook(boil.BeforeDeleteHook, rentalBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	rentalBeforeDeleteHooks = []RentalHook{}

	AddRentalHook(boil.AfterDeleteHook, rentalAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	rentalAfterDeleteHooks = []RentalHook{}

	AddRentalHook(boil.BeforeUpsertHook, rentalBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	rentalBeforeUpsertHooks = []RentalHook{}

	AddRentalHook(boil.AfterUpsertHook, rentalAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	rentalAfterUpsertHooks = []RentalHook{}
}
func testRentalsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Rentals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRentalsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx, rentalColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Rentals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRentalToManyPayments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Rental
	var b, c Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, paymentDBTypes, false, paymentColumnsWithDefault...)
	randomize.Struct(seed, &c, paymentDBTypes, false, paymentColumnsWithDefault...)

	b.RentalID.Valid = true
	c.RentalID.Valid = true
	b.RentalID.Int = a.RentalID
	c.RentalID.Int = a.RentalID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	payment, err := a.Payments(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range payment {
		if v.RentalID.Int == b.RentalID.Int {
			bFound = true
		}
		if v.RentalID.Int == c.RentalID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RentalSlice{&a}
	if err = a.L.LoadPayments(tx, false, (*[]*Rental)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Payments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Payments = nil
	if err = a.L.LoadPayments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Payments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", payment)
	}
}

func testRentalToManyAddOpPayments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Rental
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rentalDBTypes, false, strmangle.SetComplement(rentalPrimaryKeyColumns, rentalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Payment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPayments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.RentalID != first.RentalID.Int {
			t.Error("foreign key was wrong value", a.RentalID, first.RentalID.Int)
		}
		if a.RentalID != second.RentalID.Int {
			t.Error("foreign key was wrong value", a.RentalID, second.RentalID.Int)
		}

		if first.R.Rental != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Rental != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Payments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Payments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Payments(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRentalToManySetOpPayments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Rental
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rentalDBTypes, false, strmangle.SetComplement(rentalPrimaryKeyColumns, rentalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetPayments(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Payments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPayments(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Payments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RentalID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RentalID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.RentalID != d.RentalID.Int {
		t.Error("foreign key was wrong value", a.RentalID, d.RentalID.Int)
	}
	if a.RentalID != e.RentalID.Int {
		t.Error("foreign key was wrong value", a.RentalID, e.RentalID.Int)
	}

	if b.R.Rental != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Rental != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Rental != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Rental != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Payments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Payments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRentalToManyRemoveOpPayments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Rental
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rentalDBTypes, false, strmangle.SetComplement(rentalPrimaryKeyColumns, rentalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddPayments(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Payments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePayments(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Payments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RentalID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RentalID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Rental != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Rental != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Rental != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Rental != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Payments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Payments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Payments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRentalToOneCustomerUsingCustomer(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Rental
	var foreign Customer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, rentalDBTypes, false, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, customerDBTypes, false, customerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Customer struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CustomerID = foreign.CustomerID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Customer(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.CustomerID != foreign.CustomerID {
		t.Errorf("want: %v, got %v", foreign.CustomerID, check.CustomerID)
	}

	slice := RentalSlice{&local}
	if err = local.L.LoadCustomer(tx, false, (*[]*Rental)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Customer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Customer = nil
	if err = local.L.LoadCustomer(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Customer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRentalToOneInventoryUsingInventory(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Rental
	var foreign Inventory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, rentalDBTypes, false, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.InventoryID = foreign.InventoryID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Inventory(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.InventoryID != foreign.InventoryID {
		t.Errorf("want: %v, got %v", foreign.InventoryID, check.InventoryID)
	}

	slice := RentalSlice{&local}
	if err = local.L.LoadInventory(tx, false, (*[]*Rental)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Inventory == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Inventory = nil
	if err = local.L.LoadInventory(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Inventory == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRentalToOneStaffUsingStaff(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Rental
	var foreign Staff

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, rentalDBTypes, false, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.StaffID = foreign.StaffID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Staff(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.StaffID != foreign.StaffID {
		t.Errorf("want: %v, got %v", foreign.StaffID, check.StaffID)
	}

	slice := RentalSlice{&local}
	if err = local.L.LoadStaff(tx, false, (*[]*Rental)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Staff == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Staff = nil
	if err = local.L.LoadStaff(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Staff == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRentalToOneSetOpCustomerUsingCustomer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Rental
	var b, c Customer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rentalDBTypes, false, strmangle.SetComplement(rentalPrimaryKeyColumns, rentalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, customerDBTypes, false, strmangle.SetComplement(customerPrimaryKeyColumns, customerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, customerDBTypes, false, strmangle.SetComplement(customerPrimaryKeyColumns, customerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Customer{&b, &c} {
		err = a.SetCustomer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Customer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Rentals[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CustomerID != x.CustomerID {
			t.Error("foreign key was wrong value", a.CustomerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CustomerID))
		reflect.Indirect(reflect.ValueOf(&a.CustomerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CustomerID != x.CustomerID {
			t.Error("foreign key was wrong value", a.CustomerID, x.CustomerID)
		}
	}
}
func testRentalToOneSetOpInventoryUsingInventory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Rental
	var b, c Inventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rentalDBTypes, false, strmangle.SetComplement(rentalPrimaryKeyColumns, rentalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, inventoryDBTypes, false, strmangle.SetComplement(inventoryPrimaryKeyColumns, inventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, inventoryDBTypes, false, strmangle.SetComplement(inventoryPrimaryKeyColumns, inventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Inventory{&b, &c} {
		err = a.SetInventory(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Inventory != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Rentals[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InventoryID != x.InventoryID {
			t.Error("foreign key was wrong value", a.InventoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InventoryID))
		reflect.Indirect(reflect.ValueOf(&a.InventoryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.InventoryID != x.InventoryID {
			t.Error("foreign key was wrong value", a.InventoryID, x.InventoryID)
		}
	}
}
func testRentalToOneSetOpStaffUsingStaff(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Rental
	var b, c Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rentalDBTypes, false, strmangle.SetComplement(rentalPrimaryKeyColumns, rentalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Staff{&b, &c} {
		err = a.SetStaff(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Staff != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Rentals[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StaffID != x.StaffID {
			t.Error("foreign key was wrong value", a.StaffID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StaffID))
		reflect.Indirect(reflect.ValueOf(&a.StaffID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StaffID != x.StaffID {
			t.Error("foreign key was wrong value", a.StaffID, x.StaffID)
		}
	}
}
func testRentalsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = rental.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRentalsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RentalSlice{rental}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testRentalsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Rentals(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rentalDBTypes = map[string]string{`CustomerID`: `smallint`, `InventoryID`: `mediumint`, `LastUpdate`: `timestamp`, `RentalDate`: `datetime`, `RentalID`: `int`, `ReturnDate`: `datetime`, `StaffID`: `tinyint`}
	_             = bytes.MinRead
)

func testRentalsUpdate(t *testing.T) {
	t.Parallel()

	if len(rentalColumns) == len(rentalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Rentals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	if err = rental.Update(tx); err != nil {
		t.Error(err)
	}
}

func testRentalsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rentalColumns) == len(rentalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	rental := &Rental{}
	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Rentals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, rental, rentalDBTypes, true, rentalPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rentalColumns, rentalPrimaryKeyColumns) {
		fields = rentalColumns
	} else {
		fields = strmangle.SetComplement(
			rentalColumns,
			rentalPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(rental))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := RentalSlice{rental}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testRentalsUpsert(t *testing.T) {
	t.Parallel()

	if len(rentalColumns) == len(rentalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	rental := Rental{}
	if err = randomize.Struct(seed, &rental, rentalDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = rental.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Rental: %s", err)
	}

	count, err := Rentals(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &rental, rentalDBTypes, false, rentalPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	if err = rental.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Rental: %s", err)
	}

	count, err = Rentals(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
