// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// Inventory is an object representing the database table.
type Inventory struct {
	InventoryID uint32    `boil:"inventory_id" json:"inventory_id" toml:"inventory_id" yaml:"inventory_id"`
	FilmID      uint16    `boil:"film_id" json:"film_id" toml:"film_id" yaml:"film_id"`
	StoreID     uint8     `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	LastUpdate  time.Time `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *inventoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inventoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InventoryColumns = struct {
	InventoryID string
	FilmID      string
	StoreID     string
	LastUpdate  string
}{
	InventoryID: "inventory_id",
	FilmID:      "film_id",
	StoreID:     "store_id",
	LastUpdate:  "last_update",
}

// inventoryR is where relationships are stored.
type inventoryR struct {
	Film    *Film
	Store   *Store
	Rentals RentalSlice
}

// inventoryL is where Load methods for each relationship are stored.
type inventoryL struct{}

var (
	inventoryColumns               = []string{"inventory_id", "film_id", "store_id", "last_update"}
	inventoryColumnsWithoutDefault = []string{"film_id", "store_id"}
	inventoryColumnsWithDefault    = []string{"inventory_id", "last_update"}
	inventoryPrimaryKeyColumns     = []string{"inventory_id"}
)

type (
	// InventorySlice is an alias for a slice of pointers to Inventory.
	// This should generally be used opposed to []Inventory.
	InventorySlice []*Inventory
	// InventoryHook is the signature for custom Inventory hook methods
	InventoryHook func(boil.Executor, *Inventory) error

	inventoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inventoryType                 = reflect.TypeOf(&Inventory{})
	inventoryMapping              = queries.MakeStructMapping(inventoryType)
	inventoryPrimaryKeyMapping, _ = queries.BindMapping(inventoryType, inventoryMapping, inventoryPrimaryKeyColumns)
	inventoryInsertCacheMut       sync.RWMutex
	inventoryInsertCache          = make(map[string]insertCache)
	inventoryUpdateCacheMut       sync.RWMutex
	inventoryUpdateCache          = make(map[string]updateCache)
	inventoryUpsertCacheMut       sync.RWMutex
	inventoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var inventoryBeforeInsertHooks []InventoryHook
var inventoryBeforeUpdateHooks []InventoryHook
var inventoryBeforeDeleteHooks []InventoryHook
var inventoryBeforeUpsertHooks []InventoryHook

var inventoryAfterInsertHooks []InventoryHook
var inventoryAfterSelectHooks []InventoryHook
var inventoryAfterUpdateHooks []InventoryHook
var inventoryAfterDeleteHooks []InventoryHook
var inventoryAfterUpsertHooks []InventoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Inventory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range inventoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Inventory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range inventoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Inventory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range inventoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Inventory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range inventoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Inventory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range inventoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Inventory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range inventoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Inventory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range inventoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Inventory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range inventoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Inventory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range inventoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInventoryHook registers your hook function for all future operations.
func AddInventoryHook(hookPoint boil.HookPoint, inventoryHook InventoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		inventoryBeforeInsertHooks = append(inventoryBeforeInsertHooks, inventoryHook)
	case boil.BeforeUpdateHook:
		inventoryBeforeUpdateHooks = append(inventoryBeforeUpdateHooks, inventoryHook)
	case boil.BeforeDeleteHook:
		inventoryBeforeDeleteHooks = append(inventoryBeforeDeleteHooks, inventoryHook)
	case boil.BeforeUpsertHook:
		inventoryBeforeUpsertHooks = append(inventoryBeforeUpsertHooks, inventoryHook)
	case boil.AfterInsertHook:
		inventoryAfterInsertHooks = append(inventoryAfterInsertHooks, inventoryHook)
	case boil.AfterSelectHook:
		inventoryAfterSelectHooks = append(inventoryAfterSelectHooks, inventoryHook)
	case boil.AfterUpdateHook:
		inventoryAfterUpdateHooks = append(inventoryAfterUpdateHooks, inventoryHook)
	case boil.AfterDeleteHook:
		inventoryAfterDeleteHooks = append(inventoryAfterDeleteHooks, inventoryHook)
	case boil.AfterUpsertHook:
		inventoryAfterUpsertHooks = append(inventoryAfterUpsertHooks, inventoryHook)
	}
}

// OneP returns a single inventory record from the query, and panics on error.
func (q inventoryQuery) OneP() *Inventory {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single inventory record from the query.
func (q inventoryQuery) One() (*Inventory, error) {
	o := &Inventory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for inventory")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Inventory records from the query, and panics on error.
func (q inventoryQuery) AllP() InventorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Inventory records from the query.
func (q inventoryQuery) All() (InventorySlice, error) {
	var o []*Inventory

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Inventory slice")
	}

	if len(inventoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Inventory records in the query, and panics on error.
func (q inventoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Inventory records in the query.
func (q inventoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count inventory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q inventoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q inventoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if inventory exists")
	}

	return count > 0, nil
}

// FilmG pointed to by the foreign key.
func (o *Inventory) FilmG(mods ...qm.QueryMod) filmQuery {
	return o.Film(boil.GetDB(), mods...)
}

// Film pointed to by the foreign key.
func (o *Inventory) Film(exec boil.Executor, mods ...qm.QueryMod) filmQuery {
	queryMods := []qm.QueryMod{
		qm.Where("film_id=?", o.FilmID),
	}

	queryMods = append(queryMods, mods...)

	query := Films(exec, queryMods...)
	queries.SetFrom(query.Query, "`film`")

	return query
}

// StoreG pointed to by the foreign key.
func (o *Inventory) StoreG(mods ...qm.QueryMod) storeQuery {
	return o.Store(boil.GetDB(), mods...)
}

// Store pointed to by the foreign key.
func (o *Inventory) Store(exec boil.Executor, mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("store_id=?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	query := Stores(exec, queryMods...)
	queries.SetFrom(query.Query, "`store`")

	return query
}

// RentalsG retrieves all the rental's rental.
func (o *Inventory) RentalsG(mods ...qm.QueryMod) rentalQuery {
	return o.Rentals(boil.GetDB(), mods...)
}

// Rentals retrieves all the rental's rental with an executor.
func (o *Inventory) Rentals(exec boil.Executor, mods ...qm.QueryMod) rentalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`rental`.`inventory_id`=?", o.InventoryID),
	)

	query := Rentals(exec, queryMods...)
	queries.SetFrom(query.Query, "`rental`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`rental`.*"})
	}

	return query
}

// LoadFilm allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (inventoryL) LoadFilm(e boil.Executor, singular bool, maybeInventory interface{}) error {
	var slice []*Inventory
	var object *Inventory

	count := 1
	if singular {
		object = maybeInventory.(*Inventory)
	} else {
		slice = *maybeInventory.(*[]*Inventory)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &inventoryR{}
		}
		args[0] = object.FilmID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &inventoryR{}
			}
			args[i] = obj.FilmID
		}
	}

	query := fmt.Sprintf(
		"select * from `film` where `film_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Film")
	}
	defer results.Close()

	var resultSlice []*Film
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Film")
	}

	if len(inventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Film = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FilmID == foreign.FilmID {
				local.R.Film = foreign
				break
			}
		}
	}

	return nil
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (inventoryL) LoadStore(e boil.Executor, singular bool, maybeInventory interface{}) error {
	var slice []*Inventory
	var object *Inventory

	count := 1
	if singular {
		object = maybeInventory.(*Inventory)
	} else {
		slice = *maybeInventory.(*[]*Inventory)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &inventoryR{}
		}
		args[0] = object.StoreID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &inventoryR{}
			}
			args[i] = obj.StoreID
		}
	}

	query := fmt.Sprintf(
		"select * from `store` where `store_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}
	defer results.Close()

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if len(inventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Store = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StoreID == foreign.StoreID {
				local.R.Store = foreign
				break
			}
		}
	}

	return nil
}

// LoadRentals allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (inventoryL) LoadRentals(e boil.Executor, singular bool, maybeInventory interface{}) error {
	var slice []*Inventory
	var object *Inventory

	count := 1
	if singular {
		object = maybeInventory.(*Inventory)
	} else {
		slice = *maybeInventory.(*[]*Inventory)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &inventoryR{}
		}
		args[0] = object.InventoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &inventoryR{}
			}
			args[i] = obj.InventoryID
		}
	}

	query := fmt.Sprintf(
		"select * from `rental` where `inventory_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rental")
	}
	defer results.Close()

	var resultSlice []*Rental
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rental")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Rentals = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InventoryID == foreign.InventoryID {
				local.R.Rentals = append(local.R.Rentals, foreign)
				break
			}
		}
	}

	return nil
}

// SetFilmG of the inventory to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.Inventories.
// Uses the global database handle.
func (o *Inventory) SetFilmG(insert bool, related *Film) error {
	return o.SetFilm(boil.GetDB(), insert, related)
}

// SetFilmP of the inventory to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.Inventories.
// Panics on error.
func (o *Inventory) SetFilmP(exec boil.Executor, insert bool, related *Film) {
	if err := o.SetFilm(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFilmGP of the inventory to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.Inventories.
// Uses the global database handle and panics on error.
func (o *Inventory) SetFilmGP(insert bool, related *Film) {
	if err := o.SetFilm(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFilm of the inventory to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.Inventories.
func (o *Inventory) SetFilm(exec boil.Executor, insert bool, related *Film) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `inventory` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"film_id"}),
		strmangle.WhereClause("`", "`", 0, inventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.FilmID, o.InventoryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FilmID = related.FilmID

	if o.R == nil {
		o.R = &inventoryR{
			Film: related,
		}
	} else {
		o.R.Film = related
	}

	if related.R == nil {
		related.R = &filmR{
			Inventories: InventorySlice{o},
		}
	} else {
		related.R.Inventories = append(related.R.Inventories, o)
	}

	return nil
}

// SetStoreG of the inventory to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Inventories.
// Uses the global database handle.
func (o *Inventory) SetStoreG(insert bool, related *Store) error {
	return o.SetStore(boil.GetDB(), insert, related)
}

// SetStoreP of the inventory to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Inventories.
// Panics on error.
func (o *Inventory) SetStoreP(exec boil.Executor, insert bool, related *Store) {
	if err := o.SetStore(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStoreGP of the inventory to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Inventories.
// Uses the global database handle and panics on error.
func (o *Inventory) SetStoreGP(insert bool, related *Store) {
	if err := o.SetStore(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStore of the inventory to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Inventories.
func (o *Inventory) SetStore(exec boil.Executor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `inventory` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
		strmangle.WhereClause("`", "`", 0, inventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.InventoryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StoreID = related.StoreID

	if o.R == nil {
		o.R = &inventoryR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			Inventories: InventorySlice{o},
		}
	} else {
		related.R.Inventories = append(related.R.Inventories, o)
	}

	return nil
}

// AddRentalsG adds the given related objects to the existing relationships
// of the inventory, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Inventory appropriately.
// Uses the global database handle.
func (o *Inventory) AddRentalsG(insert bool, related ...*Rental) error {
	return o.AddRentals(boil.GetDB(), insert, related...)
}

// AddRentalsP adds the given related objects to the existing relationships
// of the inventory, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Inventory appropriately.
// Panics on error.
func (o *Inventory) AddRentalsP(exec boil.Executor, insert bool, related ...*Rental) {
	if err := o.AddRentals(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRentalsGP adds the given related objects to the existing relationships
// of the inventory, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Inventory appropriately.
// Uses the global database handle and panics on error.
func (o *Inventory) AddRentalsGP(insert bool, related ...*Rental) {
	if err := o.AddRentals(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRentals adds the given related objects to the existing relationships
// of the inventory, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Inventory appropriately.
func (o *Inventory) AddRentals(exec boil.Executor, insert bool, related ...*Rental) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InventoryID = o.InventoryID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `rental` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"inventory_id"}),
				strmangle.WhereClause("`", "`", 0, rentalPrimaryKeyColumns),
			)
			values := []interface{}{o.InventoryID, rel.RentalID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InventoryID = o.InventoryID
		}
	}

	if o.R == nil {
		o.R = &inventoryR{
			Rentals: related,
		}
	} else {
		o.R.Rentals = append(o.R.Rentals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rentalR{
				Inventory: o,
			}
		} else {
			rel.R.Inventory = o
		}
	}
	return nil
}

// InventoriesG retrieves all records.
func InventoriesG(mods ...qm.QueryMod) inventoryQuery {
	return Inventories(boil.GetDB(), mods...)
}

// Inventories retrieves all the records using an executor.
func Inventories(exec boil.Executor, mods ...qm.QueryMod) inventoryQuery {
	mods = append(mods, qm.From("`inventory`"))
	return inventoryQuery{NewQuery(exec, mods...)}
}

// FindInventoryG retrieves a single record by ID.
func FindInventoryG(inventoryID uint32, selectCols ...string) (*Inventory, error) {
	return FindInventory(boil.GetDB(), inventoryID, selectCols...)
}

// FindInventoryGP retrieves a single record by ID, and panics on error.
func FindInventoryGP(inventoryID uint32, selectCols ...string) *Inventory {
	retobj, err := FindInventory(boil.GetDB(), inventoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindInventory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInventory(exec boil.Executor, inventoryID uint32, selectCols ...string) (*Inventory, error) {
	inventoryObj := &Inventory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `inventory` where `inventory_id`=?", sel,
	)

	q := queries.Raw(exec, query, inventoryID)

	err := q.Bind(inventoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from inventory")
	}

	return inventoryObj, nil
}

// FindInventoryP retrieves a single record by ID with an executor, and panics on error.
func FindInventoryP(exec boil.Executor, inventoryID uint32, selectCols ...string) *Inventory {
	retobj, err := FindInventory(exec, inventoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Inventory) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Inventory) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Inventory) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Inventory) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no inventory provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inventoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	inventoryInsertCacheMut.RLock()
	cache, cached := inventoryInsertCache[key]
	inventoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			inventoryColumns,
			inventoryColumnsWithDefault,
			inventoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(inventoryType, inventoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inventoryType, inventoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `inventory` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `inventory` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `inventory` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, inventoryPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into inventory")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.InventoryID = uint32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == inventoryMapping["InventoryID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InventoryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for inventory")
	}

CacheNoHooks:
	if !cached {
		inventoryInsertCacheMut.Lock()
		inventoryInsertCache[key] = cache
		inventoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Inventory record. See Update for
// whitelist behavior description.
func (o *Inventory) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Inventory record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Inventory) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Inventory, and panics on error.
// See Update for whitelist behavior description.
func (o *Inventory) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Inventory.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Inventory) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	inventoryUpdateCacheMut.RLock()
	cache, cached := inventoryUpdateCache[key]
	inventoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			inventoryColumns,
			inventoryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("sqlboiler: unable to update inventory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `inventory` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, inventoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inventoryType, inventoryMapping, append(wl, inventoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update inventory row")
	}

	if !cached {
		inventoryUpdateCacheMut.Lock()
		inventoryUpdateCache[key] = cache
		inventoryUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q inventoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q inventoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all for inventory")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o InventorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o InventorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o InventorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InventorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `inventory` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inventoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all in inventory slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Inventory) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Inventory) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Inventory) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Inventory) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no inventory provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inventoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inventoryUpsertCacheMut.RLock()
	cache, cached := inventoryUpsertCache[key]
	inventoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			inventoryColumns,
			inventoryColumnsWithDefault,
			inventoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			inventoryColumns,
			inventoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert inventory, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "inventory", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `inventory` WHERE `inventory_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(inventoryType, inventoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inventoryType, inventoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for inventory")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.InventoryID = uint32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == inventoryMapping["InventoryID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InventoryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for inventory")
	}

CacheNoHooks:
	if !cached {
		inventoryUpsertCacheMut.Lock()
		inventoryUpsertCache[key] = cache
		inventoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Inventory record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Inventory) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Inventory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Inventory) DeleteG() error {
	if o == nil {
		return errors.New("sqlboiler: no Inventory provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Inventory record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Inventory) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Inventory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Inventory) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Inventory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inventoryPrimaryKeyMapping)
	sql := "DELETE FROM `inventory` WHERE `inventory_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete from inventory")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q inventoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q inventoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("sqlboiler: no inventoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from inventory")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o InventorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o InventorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("sqlboiler: no Inventory slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o InventorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InventorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Inventory slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(inventoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `inventory` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inventoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from inventory slice")
	}

	if len(inventoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Inventory) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Inventory) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Inventory) ReloadG() error {
	if o == nil {
		return errors.New("sqlboiler: no Inventory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Inventory) Reload(exec boil.Executor) error {
	ret, err := FindInventory(exec, o.InventoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InventorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InventorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InventorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("sqlboiler: empty InventorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InventorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	inventories := InventorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `inventory`.* FROM `inventory` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inventoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&inventories)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in InventorySlice")
	}

	*o = inventories

	return nil
}

// InventoryExists checks if the Inventory row exists.
func InventoryExists(exec boil.Executor, inventoryID uint32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `inventory` where `inventory_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, inventoryID)
	}

	row := exec.QueryRow(sql, inventoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if inventory exists")
	}

	return exists, nil
}

// InventoryExistsG checks if the Inventory row exists.
func InventoryExistsG(inventoryID uint32) (bool, error) {
	return InventoryExists(boil.GetDB(), inventoryID)
}

// InventoryExistsGP checks if the Inventory row exists. Panics on error.
func InventoryExistsGP(inventoryID uint32) bool {
	e, err := InventoryExists(boil.GetDB(), inventoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// InventoryExistsP checks if the Inventory row exists. Panics on error.
func InventoryExistsP(exec boil.Executor, inventoryID uint32) bool {
	e, err := InventoryExists(exec, inventoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
