// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Staff is an object representing the database table.
type Staff struct {
	StaffID    uint8       `boil:"staff_id" json:"staff_id" toml:"staff_id" yaml:"staff_id"`
	FirstName  string      `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName   string      `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	AddressID  uint16      `boil:"address_id" json:"address_id" toml:"address_id" yaml:"address_id"`
	Picture    null.Bytes  `boil:"picture" json:"picture,omitempty" toml:"picture" yaml:"picture,omitempty"`
	Email      null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	StoreID    uint8       `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	Active     int8        `boil:"active" json:"active" toml:"active" yaml:"active"`
	Username   string      `boil:"username" json:"username" toml:"username" yaml:"username"`
	Password   null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	LastUpdate time.Time   `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *staffR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L staffL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaffColumns = struct {
	StaffID    string
	FirstName  string
	LastName   string
	AddressID  string
	Picture    string
	Email      string
	StoreID    string
	Active     string
	Username   string
	Password   string
	LastUpdate string
}{
	StaffID:    "staff_id",
	FirstName:  "first_name",
	LastName:   "last_name",
	AddressID:  "address_id",
	Picture:    "picture",
	Email:      "email",
	StoreID:    "store_id",
	Active:     "active",
	Username:   "username",
	Password:   "password",
	LastUpdate: "last_update",
}

// staffR is where relationships are stored.
type staffR struct {
	Address           *Address
	Store             *Store
	ManagerStaffStore *Store
	Payments          PaymentSlice
	Rentals           RentalSlice
}

// staffL is where Load methods for each relationship are stored.
type staffL struct{}

var (
	staffColumns               = []string{"staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"}
	staffColumnsWithoutDefault = []string{"first_name", "last_name", "address_id", "picture", "email", "store_id", "username", "password"}
	staffColumnsWithDefault    = []string{"staff_id", "active", "last_update"}
	staffPrimaryKeyColumns     = []string{"staff_id"}
)

type (
	// StaffSlice is an alias for a slice of pointers to Staff.
	// This should generally be used opposed to []Staff.
	StaffSlice []*Staff
	// StaffHook is the signature for custom Staff hook methods
	StaffHook func(boil.Executor, *Staff) error

	staffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staffType                 = reflect.TypeOf(&Staff{})
	staffMapping              = queries.MakeStructMapping(staffType)
	staffPrimaryKeyMapping, _ = queries.BindMapping(staffType, staffMapping, staffPrimaryKeyColumns)
	staffInsertCacheMut       sync.RWMutex
	staffInsertCache          = make(map[string]insertCache)
	staffUpdateCacheMut       sync.RWMutex
	staffUpdateCache          = make(map[string]updateCache)
	staffUpsertCacheMut       sync.RWMutex
	staffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var staffBeforeInsertHooks []StaffHook
var staffBeforeUpdateHooks []StaffHook
var staffBeforeDeleteHooks []StaffHook
var staffBeforeUpsertHooks []StaffHook

var staffAfterInsertHooks []StaffHook
var staffAfterSelectHooks []StaffHook
var staffAfterUpdateHooks []StaffHook
var staffAfterDeleteHooks []StaffHook
var staffAfterUpsertHooks []StaffHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Staff) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range staffBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Staff) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range staffBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Staff) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range staffBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Staff) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range staffBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Staff) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range staffAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Staff) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range staffAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Staff) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range staffAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Staff) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range staffAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Staff) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range staffAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStaffHook registers your hook function for all future operations.
func AddStaffHook(hookPoint boil.HookPoint, staffHook StaffHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		staffBeforeInsertHooks = append(staffBeforeInsertHooks, staffHook)
	case boil.BeforeUpdateHook:
		staffBeforeUpdateHooks = append(staffBeforeUpdateHooks, staffHook)
	case boil.BeforeDeleteHook:
		staffBeforeDeleteHooks = append(staffBeforeDeleteHooks, staffHook)
	case boil.BeforeUpsertHook:
		staffBeforeUpsertHooks = append(staffBeforeUpsertHooks, staffHook)
	case boil.AfterInsertHook:
		staffAfterInsertHooks = append(staffAfterInsertHooks, staffHook)
	case boil.AfterSelectHook:
		staffAfterSelectHooks = append(staffAfterSelectHooks, staffHook)
	case boil.AfterUpdateHook:
		staffAfterUpdateHooks = append(staffAfterUpdateHooks, staffHook)
	case boil.AfterDeleteHook:
		staffAfterDeleteHooks = append(staffAfterDeleteHooks, staffHook)
	case boil.AfterUpsertHook:
		staffAfterUpsertHooks = append(staffAfterUpsertHooks, staffHook)
	}
}

// OneP returns a single staff record from the query, and panics on error.
func (q staffQuery) OneP() *Staff {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single staff record from the query.
func (q staffQuery) One() (*Staff, error) {
	o := &Staff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for staff")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Staff records from the query, and panics on error.
func (q staffQuery) AllP() StaffSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Staff records from the query.
func (q staffQuery) All() (StaffSlice, error) {
	var o []*Staff

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Staff slice")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Staff records in the query, and panics on error.
func (q staffQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Staff records in the query.
func (q staffQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count staff rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q staffQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q staffQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if staff exists")
	}

	return count > 0, nil
}

// AddressG pointed to by the foreign key.
func (o *Staff) AddressG(mods ...qm.QueryMod) addressQuery {
	return o.Address(boil.GetDB(), mods...)
}

// Address pointed to by the foreign key.
func (o *Staff) Address(exec boil.Executor, mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("address_id=?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	query := Addresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`address`")

	return query
}

// StoreG pointed to by the foreign key.
func (o *Staff) StoreG(mods ...qm.QueryMod) storeQuery {
	return o.Store(boil.GetDB(), mods...)
}

// Store pointed to by the foreign key.
func (o *Staff) Store(exec boil.Executor, mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("store_id=?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	query := Stores(exec, queryMods...)
	queries.SetFrom(query.Query, "`store`")

	return query
}

// ManagerStaffStoreG pointed to by the foreign key.
func (o *Staff) ManagerStaffStoreG(mods ...qm.QueryMod) storeQuery {
	return o.ManagerStaffStore(boil.GetDB(), mods...)
}

// ManagerStaffStore pointed to by the foreign key.
func (o *Staff) ManagerStaffStore(exec boil.Executor, mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("manager_staff_id=?", o.StaffID),
	}

	queryMods = append(queryMods, mods...)

	query := Stores(exec, queryMods...)
	queries.SetFrom(query.Query, "`store`")

	return query
}

// PaymentsG retrieves all the payment's payment.
func (o *Staff) PaymentsG(mods ...qm.QueryMod) paymentQuery {
	return o.Payments(boil.GetDB(), mods...)
}

// Payments retrieves all the payment's payment with an executor.
func (o *Staff) Payments(exec boil.Executor, mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`payment`.`staff_id`=?", o.StaffID),
	)

	query := Payments(exec, queryMods...)
	queries.SetFrom(query.Query, "`payment`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`payment`.*"})
	}

	return query
}

// RentalsG retrieves all the rental's rental.
func (o *Staff) RentalsG(mods ...qm.QueryMod) rentalQuery {
	return o.Rentals(boil.GetDB(), mods...)
}

// Rentals retrieves all the rental's rental with an executor.
func (o *Staff) Rentals(exec boil.Executor, mods ...qm.QueryMod) rentalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`rental`.`staff_id`=?", o.StaffID),
	)

	query := Rentals(exec, queryMods...)
	queries.SetFrom(query.Query, "`rental`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`rental`.*"})
	}

	return query
}

// LoadAddress allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (staffL) LoadAddress(e boil.Executor, singular bool, maybeStaff interface{}) error {
	var slice []*Staff
	var object *Staff

	count := 1
	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[0] = object.AddressID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}
			args[i] = obj.AddressID
		}
	}

	query := fmt.Sprintf(
		"select * from `address` where `address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}
	defer results.Close()

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Address = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AddressID == foreign.AddressID {
				local.R.Address = foreign
				break
			}
		}
	}

	return nil
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (staffL) LoadStore(e boil.Executor, singular bool, maybeStaff interface{}) error {
	var slice []*Staff
	var object *Staff

	count := 1
	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[0] = object.StoreID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}
			args[i] = obj.StoreID
		}
	}

	query := fmt.Sprintf(
		"select * from `store` where `store_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}
	defer results.Close()

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Store = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StoreID == foreign.StoreID {
				local.R.Store = foreign
				break
			}
		}
	}

	return nil
}

// LoadManagerStaffStore allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (staffL) LoadManagerStaffStore(e boil.Executor, singular bool, maybeStaff interface{}) error {
	var slice []*Staff
	var object *Staff

	count := 1
	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[0] = object.StaffID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}
			args[i] = obj.StaffID
		}
	}

	query := fmt.Sprintf(
		"select * from `store` where `manager_staff_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}
	defer results.Close()

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.ManagerStaffStore = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StaffID == foreign.ManagerStaffID {
				local.R.ManagerStaffStore = foreign
				break
			}
		}
	}

	return nil
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (staffL) LoadPayments(e boil.Executor, singular bool, maybeStaff interface{}) error {
	var slice []*Staff
	var object *Staff

	count := 1
	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[0] = object.StaffID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}
			args[i] = obj.StaffID
		}
	}

	query := fmt.Sprintf(
		"select * from `payment` where `staff_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment")
	}
	defer results.Close()

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Payments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StaffID == foreign.StaffID {
				local.R.Payments = append(local.R.Payments, foreign)
				break
			}
		}
	}

	return nil
}

// LoadRentals allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (staffL) LoadRentals(e boil.Executor, singular bool, maybeStaff interface{}) error {
	var slice []*Staff
	var object *Staff

	count := 1
	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[0] = object.StaffID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}
			args[i] = obj.StaffID
		}
	}

	query := fmt.Sprintf(
		"select * from `rental` where `staff_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rental")
	}
	defer results.Close()

	var resultSlice []*Rental
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rental")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Rentals = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StaffID == foreign.StaffID {
				local.R.Rentals = append(local.R.Rentals, foreign)
				break
			}
		}
	}

	return nil
}

// SetAddressG of the staff to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Staffs.
// Uses the global database handle.
func (o *Staff) SetAddressG(insert bool, related *Address) error {
	return o.SetAddress(boil.GetDB(), insert, related)
}

// SetAddressP of the staff to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Staffs.
// Panics on error.
func (o *Staff) SetAddressP(exec boil.Executor, insert bool, related *Address) {
	if err := o.SetAddress(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddressGP of the staff to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Staffs.
// Uses the global database handle and panics on error.
func (o *Staff) SetAddressGP(insert bool, related *Address) {
	if err := o.SetAddress(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddress of the staff to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Staffs.
func (o *Staff) SetAddress(exec boil.Executor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `staff` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
		strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.StaffID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AddressID = related.AddressID

	if o.R == nil {
		o.R = &staffR{
			Address: related,
		}
	} else {
		o.R.Address = related
	}

	if related.R == nil {
		related.R = &addressR{
			Staffs: StaffSlice{o},
		}
	} else {
		related.R.Staffs = append(related.R.Staffs, o)
	}

	return nil
}

// SetStoreG of the staff to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Staffs.
// Uses the global database handle.
func (o *Staff) SetStoreG(insert bool, related *Store) error {
	return o.SetStore(boil.GetDB(), insert, related)
}

// SetStoreP of the staff to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Staffs.
// Panics on error.
func (o *Staff) SetStoreP(exec boil.Executor, insert bool, related *Store) {
	if err := o.SetStore(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStoreGP of the staff to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Staffs.
// Uses the global database handle and panics on error.
func (o *Staff) SetStoreGP(insert bool, related *Store) {
	if err := o.SetStore(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStore of the staff to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Staffs.
func (o *Staff) SetStore(exec boil.Executor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `staff` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
		strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.StaffID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StoreID = related.StoreID

	if o.R == nil {
		o.R = &staffR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			Staffs: StaffSlice{o},
		}
	} else {
		related.R.Staffs = append(related.R.Staffs, o)
	}

	return nil
}

// SetManagerStaffStoreG of the staff to the related item.
// Sets o.R.ManagerStaffStore to related.
// Adds o to related.R.ManagerStaff.
// Uses the global database handle.
func (o *Staff) SetManagerStaffStoreG(insert bool, related *Store) error {
	return o.SetManagerStaffStore(boil.GetDB(), insert, related)
}

// SetManagerStaffStoreP of the staff to the related item.
// Sets o.R.ManagerStaffStore to related.
// Adds o to related.R.ManagerStaff.
// Panics on error.
func (o *Staff) SetManagerStaffStoreP(exec boil.Executor, insert bool, related *Store) {
	if err := o.SetManagerStaffStore(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetManagerStaffStoreGP of the staff to the related item.
// Sets o.R.ManagerStaffStore to related.
// Adds o to related.R.ManagerStaff.
// Uses the global database handle and panics on error.
func (o *Staff) SetManagerStaffStoreGP(insert bool, related *Store) {
	if err := o.SetManagerStaffStore(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetManagerStaffStore of the staff to the related item.
// Sets o.R.ManagerStaffStore to related.
// Adds o to related.R.ManagerStaff.
func (o *Staff) SetManagerStaffStore(exec boil.Executor, insert bool, related *Store) error {
	var err error

	if insert {
		related.ManagerStaffID = o.StaffID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `store` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"manager_staff_id"}),
			strmangle.WhereClause("`", "`", 0, storePrimaryKeyColumns),
		)
		values := []interface{}{o.StaffID, related.StoreID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ManagerStaffID = o.StaffID

	}

	if o.R == nil {
		o.R = &staffR{
			ManagerStaffStore: related,
		}
	} else {
		o.R.ManagerStaffStore = related
	}

	if related.R == nil {
		related.R = &storeR{
			ManagerStaff: o,
		}
	} else {
		related.R.ManagerStaff = o
	}
	return nil
}

// AddPaymentsG adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Staff appropriately.
// Uses the global database handle.
func (o *Staff) AddPaymentsG(insert bool, related ...*Payment) error {
	return o.AddPayments(boil.GetDB(), insert, related...)
}

// AddPaymentsP adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Staff appropriately.
// Panics on error.
func (o *Staff) AddPaymentsP(exec boil.Executor, insert bool, related ...*Payment) {
	if err := o.AddPayments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPaymentsGP adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Staff appropriately.
// Uses the global database handle and panics on error.
func (o *Staff) AddPaymentsGP(insert bool, related ...*Payment) {
	if err := o.AddPayments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPayments adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Staff appropriately.
func (o *Staff) AddPayments(exec boil.Executor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StaffID = o.StaffID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `payment` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"staff_id"}),
				strmangle.WhereClause("`", "`", 0, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.StaffID, rel.PaymentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StaffID = o.StaffID
		}
	}

	if o.R == nil {
		o.R = &staffR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Staff: o,
			}
		} else {
			rel.R.Staff = o
		}
	}
	return nil
}

// AddRentalsG adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Staff appropriately.
// Uses the global database handle.
func (o *Staff) AddRentalsG(insert bool, related ...*Rental) error {
	return o.AddRentals(boil.GetDB(), insert, related...)
}

// AddRentalsP adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Staff appropriately.
// Panics on error.
func (o *Staff) AddRentalsP(exec boil.Executor, insert bool, related ...*Rental) {
	if err := o.AddRentals(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRentalsGP adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Staff appropriately.
// Uses the global database handle and panics on error.
func (o *Staff) AddRentalsGP(insert bool, related ...*Rental) {
	if err := o.AddRentals(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRentals adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Staff appropriately.
func (o *Staff) AddRentals(exec boil.Executor, insert bool, related ...*Rental) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StaffID = o.StaffID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `rental` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"staff_id"}),
				strmangle.WhereClause("`", "`", 0, rentalPrimaryKeyColumns),
			)
			values := []interface{}{o.StaffID, rel.RentalID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StaffID = o.StaffID
		}
	}

	if o.R == nil {
		o.R = &staffR{
			Rentals: related,
		}
	} else {
		o.R.Rentals = append(o.R.Rentals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rentalR{
				Staff: o,
			}
		} else {
			rel.R.Staff = o
		}
	}
	return nil
}

// StaffsG retrieves all records.
func StaffsG(mods ...qm.QueryMod) staffQuery {
	return Staffs(boil.GetDB(), mods...)
}

// Staffs retrieves all the records using an executor.
func Staffs(exec boil.Executor, mods ...qm.QueryMod) staffQuery {
	mods = append(mods, qm.From("`staff`"))
	return staffQuery{NewQuery(exec, mods...)}
}

// FindStaffG retrieves a single record by ID.
func FindStaffG(staffID uint8, selectCols ...string) (*Staff, error) {
	return FindStaff(boil.GetDB(), staffID, selectCols...)
}

// FindStaffGP retrieves a single record by ID, and panics on error.
func FindStaffGP(staffID uint8, selectCols ...string) *Staff {
	retobj, err := FindStaff(boil.GetDB(), staffID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindStaff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaff(exec boil.Executor, staffID uint8, selectCols ...string) (*Staff, error) {
	staffObj := &Staff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `staff` where `staff_id`=?", sel,
	)

	q := queries.Raw(exec, query, staffID)

	err := q.Bind(staffObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from staff")
	}

	return staffObj, nil
}

// FindStaffP retrieves a single record by ID with an executor, and panics on error.
func FindStaffP(exec boil.Executor, staffID uint8, selectCols ...string) *Staff {
	retobj, err := FindStaff(exec, staffID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Staff) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Staff) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Staff) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Staff) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no staff provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	staffInsertCacheMut.RLock()
	cache, cached := staffInsertCache[key]
	staffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			staffColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staffType, staffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `staff` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `staff` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `staff` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into staff")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.StaffID = uint8(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == staffMapping["StaffID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StaffID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for staff")
	}

CacheNoHooks:
	if !cached {
		staffInsertCacheMut.Lock()
		staffInsertCache[key] = cache
		staffInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Staff record. See Update for
// whitelist behavior description.
func (o *Staff) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Staff record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Staff) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Staff, and panics on error.
// See Update for whitelist behavior description.
func (o *Staff) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Staff.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Staff) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	staffUpdateCacheMut.RLock()
	cache, cached := staffUpdateCache[key]
	staffUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			staffColumns,
			staffPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("sqlboiler: unable to update staff, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `staff` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, append(wl, staffPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update staff row")
	}

	if !cached {
		staffUpdateCacheMut.Lock()
		staffUpdateCache[key] = cache
		staffUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q staffQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q staffQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all for staff")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StaffSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o StaffSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o StaffSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaffSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `staff` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all in staff slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Staff) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Staff) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Staff) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Staff) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no staff provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staffUpsertCacheMut.RLock()
	cache, cached := staffUpsertCache[key]
	staffUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			staffColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			staffColumns,
			staffPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert staff, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "staff", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `staff` WHERE `staff_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staffType, staffMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for staff")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.StaffID = uint8(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == staffMapping["StaffID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StaffID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for staff")
	}

CacheNoHooks:
	if !cached {
		staffUpsertCacheMut.Lock()
		staffUpsertCache[key] = cache
		staffUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Staff record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Staff) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Staff record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Staff) DeleteG() error {
	if o == nil {
		return errors.New("sqlboiler: no Staff provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Staff record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Staff) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Staff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Staff) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Staff provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staffPrimaryKeyMapping)
	sql := "DELETE FROM `staff` WHERE `staff_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete from staff")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q staffQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q staffQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("sqlboiler: no staffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from staff")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o StaffSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o StaffSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("sqlboiler: no Staff slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o StaffSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaffSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Staff slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(staffBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `staff` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from staff slice")
	}

	if len(staffAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Staff) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Staff) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Staff) ReloadG() error {
	if o == nil {
		return errors.New("sqlboiler: no Staff provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Staff) Reload(exec boil.Executor) error {
	ret, err := FindStaff(exec, o.StaffID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StaffSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StaffSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("sqlboiler: empty StaffSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	staffs := StaffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `staff`.* FROM `staff` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&staffs)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in StaffSlice")
	}

	*o = staffs

	return nil
}

// StaffExists checks if the Staff row exists.
func StaffExists(exec boil.Executor, staffID uint8) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `staff` where `staff_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, staffID)
	}

	row := exec.QueryRow(sql, staffID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if staff exists")
	}

	return exists, nil
}

// StaffExistsG checks if the Staff row exists.
func StaffExistsG(staffID uint8) (bool, error) {
	return StaffExists(boil.GetDB(), staffID)
}

// StaffExistsGP checks if the Staff row exists. Panics on error.
func StaffExistsGP(staffID uint8) bool {
	e, err := StaffExists(boil.GetDB(), staffID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// StaffExistsP checks if the Staff row exists. Panics on error.
func StaffExistsP(exec boil.Executor, staffID uint8) bool {
	e, err := StaffExists(exec, staffID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
