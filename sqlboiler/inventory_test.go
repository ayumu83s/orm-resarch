// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testInventories(t *testing.T) {
	t.Parallel()

	query := Inventories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testInventoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = inventory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInventoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Inventories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInventoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InventorySlice{inventory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testInventoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := InventoryExists(tx, inventory.InventoryID)
	if err != nil {
		t.Errorf("Unable to check if Inventory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InventoryExistsG to return true, but got false.")
	}
}
func testInventoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	inventoryFound, err := FindInventory(tx, inventory.InventoryID)
	if err != nil {
		t.Error(err)
	}

	if inventoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testInventoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Inventories(tx).Bind(inventory); err != nil {
		t.Error(err)
	}
}

func testInventoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Inventories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInventoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventoryOne := &Inventory{}
	inventoryTwo := &Inventory{}
	if err = randomize.Struct(seed, inventoryOne, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}
	if err = randomize.Struct(seed, inventoryTwo, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = inventoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Inventories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInventoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	inventoryOne := &Inventory{}
	inventoryTwo := &Inventory{}
	if err = randomize.Struct(seed, inventoryOne, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}
	if err = randomize.Struct(seed, inventoryTwo, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = inventoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func inventoryBeforeInsertHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryAfterInsertHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryAfterSelectHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryBeforeUpdateHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryAfterUpdateHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryBeforeDeleteHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryAfterDeleteHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryBeforeUpsertHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryAfterUpsertHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func testInventoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Inventory{}
	o := &Inventory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, inventoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Inventory object: %s", err)
	}

	AddInventoryHook(boil.BeforeInsertHook, inventoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	inventoryBeforeInsertHooks = []InventoryHook{}

	AddInventoryHook(boil.AfterInsertHook, inventoryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	inventoryAfterInsertHooks = []InventoryHook{}

	AddInventoryHook(boil.AfterSelectHook, inventoryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	inventoryAfterSelectHooks = []InventoryHook{}

	AddInventoryHook(boil.BeforeUpdateHook, inventoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	inventoryBeforeUpdateHooks = []InventoryHook{}

	AddInventoryHook(boil.AfterUpdateHook, inventoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	inventoryAfterUpdateHooks = []InventoryHook{}

	AddInventoryHook(boil.BeforeDeleteHook, inventoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	inventoryBeforeDeleteHooks = []InventoryHook{}

	AddInventoryHook(boil.AfterDeleteHook, inventoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	inventoryAfterDeleteHooks = []InventoryHook{}

	AddInventoryHook(boil.BeforeUpsertHook, inventoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	inventoryBeforeUpsertHooks = []InventoryHook{}

	AddInventoryHook(boil.AfterUpsertHook, inventoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	inventoryAfterUpsertHooks = []InventoryHook{}
}
func testInventoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInventoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx, inventoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInventoryToManyRentals(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Inventory
	var b, c Rental

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, rentalDBTypes, false, rentalColumnsWithDefault...)
	randomize.Struct(seed, &c, rentalDBTypes, false, rentalColumnsWithDefault...)

	b.InventoryID = a.InventoryID
	c.InventoryID = a.InventoryID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	rental, err := a.Rentals(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range rental {
		if v.InventoryID == b.InventoryID {
			bFound = true
		}
		if v.InventoryID == c.InventoryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InventorySlice{&a}
	if err = a.L.LoadRentals(tx, false, (*[]*Inventory)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Rentals); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Rentals = nil
	if err = a.L.LoadRentals(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Rentals); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", rental)
	}
}

func testInventoryToManyAddOpRentals(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Inventory
	var b, c, d, e Rental

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inventoryDBTypes, false, strmangle.SetComplement(inventoryPrimaryKeyColumns, inventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Rental{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, rentalDBTypes, false, strmangle.SetComplement(rentalPrimaryKeyColumns, rentalColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Rental{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRentals(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.InventoryID != first.InventoryID {
			t.Error("foreign key was wrong value", a.InventoryID, first.InventoryID)
		}
		if a.InventoryID != second.InventoryID {
			t.Error("foreign key was wrong value", a.InventoryID, second.InventoryID)
		}

		if first.R.Inventory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Inventory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Rentals[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Rentals[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Rentals(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testInventoryToOneFilmUsingFilm(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Inventory
	var foreign Film

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, filmDBTypes, false, filmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Film struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.FilmID = foreign.FilmID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Film(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.FilmID != foreign.FilmID {
		t.Errorf("want: %v, got %v", foreign.FilmID, check.FilmID)
	}

	slice := InventorySlice{&local}
	if err = local.L.LoadFilm(tx, false, (*[]*Inventory)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Film = nil
	if err = local.L.LoadFilm(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInventoryToOneStoreUsingStore(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Inventory
	var foreign Store

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, storeDBTypes, false, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.StoreID = foreign.StoreID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Store(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.StoreID != foreign.StoreID {
		t.Errorf("want: %v, got %v", foreign.StoreID, check.StoreID)
	}

	slice := InventorySlice{&local}
	if err = local.L.LoadStore(tx, false, (*[]*Inventory)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Store = nil
	if err = local.L.LoadStore(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInventoryToOneSetOpFilmUsingFilm(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Inventory
	var b, c Film

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inventoryDBTypes, false, strmangle.SetComplement(inventoryPrimaryKeyColumns, inventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Film{&b, &c} {
		err = a.SetFilm(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Film != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Inventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FilmID != x.FilmID {
			t.Error("foreign key was wrong value", a.FilmID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FilmID))
		reflect.Indirect(reflect.ValueOf(&a.FilmID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FilmID != x.FilmID {
			t.Error("foreign key was wrong value", a.FilmID, x.FilmID)
		}
	}
}
func testInventoryToOneSetOpStoreUsingStore(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Inventory
	var b, c Store

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inventoryDBTypes, false, strmangle.SetComplement(inventoryPrimaryKeyColumns, inventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Store{&b, &c} {
		err = a.SetStore(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Store != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Inventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StoreID != x.StoreID {
			t.Error("foreign key was wrong value", a.StoreID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StoreID))
		reflect.Indirect(reflect.ValueOf(&a.StoreID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StoreID != x.StoreID {
			t.Error("foreign key was wrong value", a.StoreID, x.StoreID)
		}
	}
}
func testInventoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = inventory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testInventoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InventorySlice{inventory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testInventoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Inventories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	inventoryDBTypes = map[string]string{`FilmID`: `smallint`, `InventoryID`: `mediumint`, `LastUpdate`: `timestamp`, `StoreID`: `tinyint`}
	_                = bytes.MinRead
)

func testInventoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(inventoryColumns) == len(inventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	if err = inventory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testInventoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(inventoryColumns) == len(inventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(inventoryColumns, inventoryPrimaryKeyColumns) {
		fields = inventoryColumns
	} else {
		fields = strmangle.SetComplement(
			inventoryColumns,
			inventoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(inventory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := InventorySlice{inventory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testInventoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(inventoryColumns) == len(inventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	inventory := Inventory{}
	if err = randomize.Struct(seed, &inventory, inventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Inventory: %s", err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &inventory, inventoryDBTypes, false, inventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	if err = inventory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Inventory: %s", err)
	}

	count, err = Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
