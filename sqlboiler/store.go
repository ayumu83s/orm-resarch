// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// Store is an object representing the database table.
type Store struct {
	StoreID        uint8     `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	ManagerStaffID uint8     `boil:"manager_staff_id" json:"manager_staff_id" toml:"manager_staff_id" yaml:"manager_staff_id"`
	AddressID      uint16    `boil:"address_id" json:"address_id" toml:"address_id" yaml:"address_id"`
	LastUpdate     time.Time `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *storeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StoreColumns = struct {
	StoreID        string
	ManagerStaffID string
	AddressID      string
	LastUpdate     string
}{
	StoreID:        "store_id",
	ManagerStaffID: "manager_staff_id",
	AddressID:      "address_id",
	LastUpdate:     "last_update",
}

// storeR is where relationships are stored.
type storeR struct {
	Address      *Address
	ManagerStaff *Staff
	Customers    CustomerSlice
	Inventories  InventorySlice
	Staffs       StaffSlice
}

// storeL is where Load methods for each relationship are stored.
type storeL struct{}

var (
	storeColumns               = []string{"store_id", "manager_staff_id", "address_id", "last_update"}
	storeColumnsWithoutDefault = []string{"manager_staff_id", "address_id"}
	storeColumnsWithDefault    = []string{"store_id", "last_update"}
	storePrimaryKeyColumns     = []string{"store_id"}
)

type (
	// StoreSlice is an alias for a slice of pointers to Store.
	// This should generally be used opposed to []Store.
	StoreSlice []*Store
	// StoreHook is the signature for custom Store hook methods
	StoreHook func(boil.Executor, *Store) error

	storeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storeType                 = reflect.TypeOf(&Store{})
	storeMapping              = queries.MakeStructMapping(storeType)
	storePrimaryKeyMapping, _ = queries.BindMapping(storeType, storeMapping, storePrimaryKeyColumns)
	storeInsertCacheMut       sync.RWMutex
	storeInsertCache          = make(map[string]insertCache)
	storeUpdateCacheMut       sync.RWMutex
	storeUpdateCache          = make(map[string]updateCache)
	storeUpsertCacheMut       sync.RWMutex
	storeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var storeBeforeInsertHooks []StoreHook
var storeBeforeUpdateHooks []StoreHook
var storeBeforeDeleteHooks []StoreHook
var storeBeforeUpsertHooks []StoreHook

var storeAfterInsertHooks []StoreHook
var storeAfterSelectHooks []StoreHook
var storeAfterUpdateHooks []StoreHook
var storeAfterDeleteHooks []StoreHook
var storeAfterUpsertHooks []StoreHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Store) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Store) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range storeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Store) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range storeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Store) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Store) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Store) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range storeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Store) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range storeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Store) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range storeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Store) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStoreHook registers your hook function for all future operations.
func AddStoreHook(hookPoint boil.HookPoint, storeHook StoreHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		storeBeforeInsertHooks = append(storeBeforeInsertHooks, storeHook)
	case boil.BeforeUpdateHook:
		storeBeforeUpdateHooks = append(storeBeforeUpdateHooks, storeHook)
	case boil.BeforeDeleteHook:
		storeBeforeDeleteHooks = append(storeBeforeDeleteHooks, storeHook)
	case boil.BeforeUpsertHook:
		storeBeforeUpsertHooks = append(storeBeforeUpsertHooks, storeHook)
	case boil.AfterInsertHook:
		storeAfterInsertHooks = append(storeAfterInsertHooks, storeHook)
	case boil.AfterSelectHook:
		storeAfterSelectHooks = append(storeAfterSelectHooks, storeHook)
	case boil.AfterUpdateHook:
		storeAfterUpdateHooks = append(storeAfterUpdateHooks, storeHook)
	case boil.AfterDeleteHook:
		storeAfterDeleteHooks = append(storeAfterDeleteHooks, storeHook)
	case boil.AfterUpsertHook:
		storeAfterUpsertHooks = append(storeAfterUpsertHooks, storeHook)
	}
}

// OneP returns a single store record from the query, and panics on error.
func (q storeQuery) OneP() *Store {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single store record from the query.
func (q storeQuery) One() (*Store, error) {
	o := &Store{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for store")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Store records from the query, and panics on error.
func (q storeQuery) AllP() StoreSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Store records from the query.
func (q storeQuery) All() (StoreSlice, error) {
	var o []*Store

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Store slice")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Store records in the query, and panics on error.
func (q storeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Store records in the query.
func (q storeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count store rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q storeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q storeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if store exists")
	}

	return count > 0, nil
}

// AddressG pointed to by the foreign key.
func (o *Store) AddressG(mods ...qm.QueryMod) addressQuery {
	return o.Address(boil.GetDB(), mods...)
}

// Address pointed to by the foreign key.
func (o *Store) Address(exec boil.Executor, mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("address_id=?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	query := Addresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`address`")

	return query
}

// ManagerStaffG pointed to by the foreign key.
func (o *Store) ManagerStaffG(mods ...qm.QueryMod) staffQuery {
	return o.ManagerStaff(boil.GetDB(), mods...)
}

// ManagerStaff pointed to by the foreign key.
func (o *Store) ManagerStaff(exec boil.Executor, mods ...qm.QueryMod) staffQuery {
	queryMods := []qm.QueryMod{
		qm.Where("staff_id=?", o.ManagerStaffID),
	}

	queryMods = append(queryMods, mods...)

	query := Staffs(exec, queryMods...)
	queries.SetFrom(query.Query, "`staff`")

	return query
}

// CustomersG retrieves all the customer's customer.
func (o *Store) CustomersG(mods ...qm.QueryMod) customerQuery {
	return o.Customers(boil.GetDB(), mods...)
}

// Customers retrieves all the customer's customer with an executor.
func (o *Store) Customers(exec boil.Executor, mods ...qm.QueryMod) customerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`customer`.`store_id`=?", o.StoreID),
	)

	query := Customers(exec, queryMods...)
	queries.SetFrom(query.Query, "`customer`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`customer`.*"})
	}

	return query
}

// InventoriesG retrieves all the inventory's inventory.
func (o *Store) InventoriesG(mods ...qm.QueryMod) inventoryQuery {
	return o.Inventories(boil.GetDB(), mods...)
}

// Inventories retrieves all the inventory's inventory with an executor.
func (o *Store) Inventories(exec boil.Executor, mods ...qm.QueryMod) inventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`inventory`.`store_id`=?", o.StoreID),
	)

	query := Inventories(exec, queryMods...)
	queries.SetFrom(query.Query, "`inventory`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`inventory`.*"})
	}

	return query
}

// StaffsG retrieves all the staff's staff.
func (o *Store) StaffsG(mods ...qm.QueryMod) staffQuery {
	return o.Staffs(boil.GetDB(), mods...)
}

// Staffs retrieves all the staff's staff with an executor.
func (o *Store) Staffs(exec boil.Executor, mods ...qm.QueryMod) staffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`staff`.`store_id`=?", o.StoreID),
	)

	query := Staffs(exec, queryMods...)
	queries.SetFrom(query.Query, "`staff`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`staff`.*"})
	}

	return query
}

// LoadAddress allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (storeL) LoadAddress(e boil.Executor, singular bool, maybeStore interface{}) error {
	var slice []*Store
	var object *Store

	count := 1
	if singular {
		object = maybeStore.(*Store)
	} else {
		slice = *maybeStore.(*[]*Store)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args[0] = object.AddressID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}
			args[i] = obj.AddressID
		}
	}

	query := fmt.Sprintf(
		"select * from `address` where `address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}
	defer results.Close()

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Address = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AddressID == foreign.AddressID {
				local.R.Address = foreign
				break
			}
		}
	}

	return nil
}

// LoadManagerStaff allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (storeL) LoadManagerStaff(e boil.Executor, singular bool, maybeStore interface{}) error {
	var slice []*Store
	var object *Store

	count := 1
	if singular {
		object = maybeStore.(*Store)
	} else {
		slice = *maybeStore.(*[]*Store)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args[0] = object.ManagerStaffID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}
			args[i] = obj.ManagerStaffID
		}
	}

	query := fmt.Sprintf(
		"select * from `staff` where `staff_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Staff")
	}
	defer results.Close()

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Staff")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.ManagerStaff = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ManagerStaffID == foreign.StaffID {
				local.R.ManagerStaff = foreign
				break
			}
		}
	}

	return nil
}

// LoadCustomers allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (storeL) LoadCustomers(e boil.Executor, singular bool, maybeStore interface{}) error {
	var slice []*Store
	var object *Store

	count := 1
	if singular {
		object = maybeStore.(*Store)
	} else {
		slice = *maybeStore.(*[]*Store)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args[0] = object.StoreID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}
			args[i] = obj.StoreID
		}
	}

	query := fmt.Sprintf(
		"select * from `customer` where `store_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load customer")
	}
	defer results.Close()

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice customer")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Customers = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StoreID == foreign.StoreID {
				local.R.Customers = append(local.R.Customers, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInventories allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (storeL) LoadInventories(e boil.Executor, singular bool, maybeStore interface{}) error {
	var slice []*Store
	var object *Store

	count := 1
	if singular {
		object = maybeStore.(*Store)
	} else {
		slice = *maybeStore.(*[]*Store)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args[0] = object.StoreID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}
			args[i] = obj.StoreID
		}
	}

	query := fmt.Sprintf(
		"select * from `inventory` where `store_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load inventory")
	}
	defer results.Close()

	var resultSlice []*Inventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice inventory")
	}

	if len(inventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Inventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StoreID == foreign.StoreID {
				local.R.Inventories = append(local.R.Inventories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStaffs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (storeL) LoadStaffs(e boil.Executor, singular bool, maybeStore interface{}) error {
	var slice []*Store
	var object *Store

	count := 1
	if singular {
		object = maybeStore.(*Store)
	} else {
		slice = *maybeStore.(*[]*Store)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args[0] = object.StoreID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}
			args[i] = obj.StoreID
		}
	}

	query := fmt.Sprintf(
		"select * from `staff` where `store_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staff")
	}
	defer results.Close()

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice staff")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Staffs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StoreID == foreign.StoreID {
				local.R.Staffs = append(local.R.Staffs, foreign)
				break
			}
		}
	}

	return nil
}

// SetAddressG of the store to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Stores.
// Uses the global database handle.
func (o *Store) SetAddressG(insert bool, related *Address) error {
	return o.SetAddress(boil.GetDB(), insert, related)
}

// SetAddressP of the store to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Stores.
// Panics on error.
func (o *Store) SetAddressP(exec boil.Executor, insert bool, related *Address) {
	if err := o.SetAddress(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddressGP of the store to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Stores.
// Uses the global database handle and panics on error.
func (o *Store) SetAddressGP(insert bool, related *Address) {
	if err := o.SetAddress(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddress of the store to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Stores.
func (o *Store) SetAddress(exec boil.Executor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `store` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
		strmangle.WhereClause("`", "`", 0, storePrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.StoreID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AddressID = related.AddressID

	if o.R == nil {
		o.R = &storeR{
			Address: related,
		}
	} else {
		o.R.Address = related
	}

	if related.R == nil {
		related.R = &addressR{
			Stores: StoreSlice{o},
		}
	} else {
		related.R.Stores = append(related.R.Stores, o)
	}

	return nil
}

// SetManagerStaffG of the store to the related item.
// Sets o.R.ManagerStaff to related.
// Adds o to related.R.ManagerStaffStore.
// Uses the global database handle.
func (o *Store) SetManagerStaffG(insert bool, related *Staff) error {
	return o.SetManagerStaff(boil.GetDB(), insert, related)
}

// SetManagerStaffP of the store to the related item.
// Sets o.R.ManagerStaff to related.
// Adds o to related.R.ManagerStaffStore.
// Panics on error.
func (o *Store) SetManagerStaffP(exec boil.Executor, insert bool, related *Staff) {
	if err := o.SetManagerStaff(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetManagerStaffGP of the store to the related item.
// Sets o.R.ManagerStaff to related.
// Adds o to related.R.ManagerStaffStore.
// Uses the global database handle and panics on error.
func (o *Store) SetManagerStaffGP(insert bool, related *Staff) {
	if err := o.SetManagerStaff(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetManagerStaff of the store to the related item.
// Sets o.R.ManagerStaff to related.
// Adds o to related.R.ManagerStaffStore.
func (o *Store) SetManagerStaff(exec boil.Executor, insert bool, related *Staff) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `store` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"manager_staff_id"}),
		strmangle.WhereClause("`", "`", 0, storePrimaryKeyColumns),
	)
	values := []interface{}{related.StaffID, o.StoreID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ManagerStaffID = related.StaffID

	if o.R == nil {
		o.R = &storeR{
			ManagerStaff: related,
		}
	} else {
		o.R.ManagerStaff = related
	}

	if related.R == nil {
		related.R = &staffR{
			ManagerStaffStore: o,
		}
	} else {
		related.R.ManagerStaffStore = o
	}

	return nil
}

// AddCustomersG adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.Store appropriately.
// Uses the global database handle.
func (o *Store) AddCustomersG(insert bool, related ...*Customer) error {
	return o.AddCustomers(boil.GetDB(), insert, related...)
}

// AddCustomersP adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.Store appropriately.
// Panics on error.
func (o *Store) AddCustomersP(exec boil.Executor, insert bool, related ...*Customer) {
	if err := o.AddCustomers(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCustomersGP adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.Store appropriately.
// Uses the global database handle and panics on error.
func (o *Store) AddCustomersGP(insert bool, related ...*Customer) {
	if err := o.AddCustomers(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCustomers adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.Store appropriately.
func (o *Store) AddCustomers(exec boil.Executor, insert bool, related ...*Customer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StoreID = o.StoreID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `customer` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
				strmangle.WhereClause("`", "`", 0, customerPrimaryKeyColumns),
			)
			values := []interface{}{o.StoreID, rel.CustomerID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StoreID = o.StoreID
		}
	}

	if o.R == nil {
		o.R = &storeR{
			Customers: related,
		}
	} else {
		o.R.Customers = append(o.R.Customers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &customerR{
				Store: o,
			}
		} else {
			rel.R.Store = o
		}
	}
	return nil
}

// AddInventoriesG adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Inventories.
// Sets related.R.Store appropriately.
// Uses the global database handle.
func (o *Store) AddInventoriesG(insert bool, related ...*Inventory) error {
	return o.AddInventories(boil.GetDB(), insert, related...)
}

// AddInventoriesP adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Inventories.
// Sets related.R.Store appropriately.
// Panics on error.
func (o *Store) AddInventoriesP(exec boil.Executor, insert bool, related ...*Inventory) {
	if err := o.AddInventories(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInventoriesGP adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Inventories.
// Sets related.R.Store appropriately.
// Uses the global database handle and panics on error.
func (o *Store) AddInventoriesGP(insert bool, related ...*Inventory) {
	if err := o.AddInventories(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInventories adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Inventories.
// Sets related.R.Store appropriately.
func (o *Store) AddInventories(exec boil.Executor, insert bool, related ...*Inventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StoreID = o.StoreID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `inventory` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
				strmangle.WhereClause("`", "`", 0, inventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.StoreID, rel.InventoryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StoreID = o.StoreID
		}
	}

	if o.R == nil {
		o.R = &storeR{
			Inventories: related,
		}
	} else {
		o.R.Inventories = append(o.R.Inventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inventoryR{
				Store: o,
			}
		} else {
			rel.R.Store = o
		}
	}
	return nil
}

// AddStaffsG adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Store appropriately.
// Uses the global database handle.
func (o *Store) AddStaffsG(insert bool, related ...*Staff) error {
	return o.AddStaffs(boil.GetDB(), insert, related...)
}

// AddStaffsP adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Store appropriately.
// Panics on error.
func (o *Store) AddStaffsP(exec boil.Executor, insert bool, related ...*Staff) {
	if err := o.AddStaffs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStaffsGP adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Store appropriately.
// Uses the global database handle and panics on error.
func (o *Store) AddStaffsGP(insert bool, related ...*Staff) {
	if err := o.AddStaffs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStaffs adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Store appropriately.
func (o *Store) AddStaffs(exec boil.Executor, insert bool, related ...*Staff) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StoreID = o.StoreID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `staff` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
				strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
			)
			values := []interface{}{o.StoreID, rel.StaffID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StoreID = o.StoreID
		}
	}

	if o.R == nil {
		o.R = &storeR{
			Staffs: related,
		}
	} else {
		o.R.Staffs = append(o.R.Staffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staffR{
				Store: o,
			}
		} else {
			rel.R.Store = o
		}
	}
	return nil
}

// StoresG retrieves all records.
func StoresG(mods ...qm.QueryMod) storeQuery {
	return Stores(boil.GetDB(), mods...)
}

// Stores retrieves all the records using an executor.
func Stores(exec boil.Executor, mods ...qm.QueryMod) storeQuery {
	mods = append(mods, qm.From("`store`"))
	return storeQuery{NewQuery(exec, mods...)}
}

// FindStoreG retrieves a single record by ID.
func FindStoreG(storeID uint8, selectCols ...string) (*Store, error) {
	return FindStore(boil.GetDB(), storeID, selectCols...)
}

// FindStoreGP retrieves a single record by ID, and panics on error.
func FindStoreGP(storeID uint8, selectCols ...string) *Store {
	retobj, err := FindStore(boil.GetDB(), storeID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindStore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStore(exec boil.Executor, storeID uint8, selectCols ...string) (*Store, error) {
	storeObj := &Store{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `store` where `store_id`=?", sel,
	)

	q := queries.Raw(exec, query, storeID)

	err := q.Bind(storeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from store")
	}

	return storeObj, nil
}

// FindStoreP retrieves a single record by ID with an executor, and panics on error.
func FindStoreP(exec boil.Executor, storeID uint8, selectCols ...string) *Store {
	retobj, err := FindStore(exec, storeID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Store) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Store) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Store) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Store) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no store provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	storeInsertCacheMut.RLock()
	cache, cached := storeInsertCache[key]
	storeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			storeColumns,
			storeColumnsWithDefault,
			storeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(storeType, storeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storeType, storeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `store` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `store` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `store` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, storePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into store")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.StoreID = uint8(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == storeMapping["StoreID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StoreID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for store")
	}

CacheNoHooks:
	if !cached {
		storeInsertCacheMut.Lock()
		storeInsertCache[key] = cache
		storeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Store record. See Update for
// whitelist behavior description.
func (o *Store) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Store record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Store) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Store, and panics on error.
// See Update for whitelist behavior description.
func (o *Store) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Store.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Store) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	storeUpdateCacheMut.RLock()
	cache, cached := storeUpdateCache[key]
	storeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			storeColumns,
			storePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("sqlboiler: unable to update store, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `store` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, storePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storeType, storeMapping, append(wl, storePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update store row")
	}

	if !cached {
		storeUpdateCacheMut.Lock()
		storeUpdateCache[key] = cache
		storeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q storeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q storeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all for store")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StoreSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o StoreSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o StoreSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StoreSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `store` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, storePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all in store slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Store) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Store) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Store) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Store) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no store provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storeUpsertCacheMut.RLock()
	cache, cached := storeUpsertCache[key]
	storeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			storeColumns,
			storeColumnsWithDefault,
			storeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			storeColumns,
			storePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert store, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "store", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `store` WHERE `store_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(storeType, storeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storeType, storeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for store")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.StoreID = uint8(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == storeMapping["StoreID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StoreID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for store")
	}

CacheNoHooks:
	if !cached {
		storeUpsertCacheMut.Lock()
		storeUpsertCache[key] = cache
		storeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Store record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Store) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Store record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Store) DeleteG() error {
	if o == nil {
		return errors.New("sqlboiler: no Store provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Store record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Store) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Store record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Store) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Store provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storePrimaryKeyMapping)
	sql := "DELETE FROM `store` WHERE `store_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete from store")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q storeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q storeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("sqlboiler: no storeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from store")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o StoreSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o StoreSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("sqlboiler: no Store slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o StoreSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StoreSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Store slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(storeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `store` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, storePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from store slice")
	}

	if len(storeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Store) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Store) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Store) ReloadG() error {
	if o == nil {
		return errors.New("sqlboiler: no Store provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Store) Reload(exec boil.Executor) error {
	ret, err := FindStore(exec, o.StoreID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StoreSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StoreSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("sqlboiler: empty StoreSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	stores := StoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `store`.* FROM `store` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, storePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&stores)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in StoreSlice")
	}

	*o = stores

	return nil
}

// StoreExists checks if the Store row exists.
func StoreExists(exec boil.Executor, storeID uint8) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `store` where `store_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, storeID)
	}

	row := exec.QueryRow(sql, storeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if store exists")
	}

	return exists, nil
}

// StoreExistsG checks if the Store row exists.
func StoreExistsG(storeID uint8) (bool, error) {
	return StoreExists(boil.GetDB(), storeID)
}

// StoreExistsGP checks if the Store row exists. Panics on error.
func StoreExistsGP(storeID uint8) bool {
	e, err := StoreExists(boil.GetDB(), storeID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// StoreExistsP checks if the Store row exists. Panics on error.
func StoreExistsP(exec boil.Executor, storeID uint8) bool {
	e, err := StoreExists(exec, storeID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
