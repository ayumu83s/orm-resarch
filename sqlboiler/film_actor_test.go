// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testFilmActors(t *testing.T) {
	t.Parallel()

	query := FilmActors(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testFilmActorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = filmActor.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmActors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmActorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = FilmActors(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := FilmActors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmActorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FilmActorSlice{filmActor}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmActors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testFilmActorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := FilmActorExists(tx, filmActor.ActorID, filmActor.FilmID)
	if err != nil {
		t.Errorf("Unable to check if FilmActor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FilmActorExistsG to return true, but got false.")
	}
}
func testFilmActorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	filmActorFound, err := FindFilmActor(tx, filmActor.ActorID, filmActor.FilmID)
	if err != nil {
		t.Error(err)
	}

	if filmActorFound == nil {
		t.Error("want a record, got nil")
	}
}
func testFilmActorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = FilmActors(tx).Bind(filmActor); err != nil {
		t.Error(err)
	}
}

func testFilmActorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := FilmActors(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFilmActorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActorOne := &FilmActor{}
	filmActorTwo := &FilmActor{}
	if err = randomize.Struct(seed, filmActorOne, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}
	if err = randomize.Struct(seed, filmActorTwo, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActorOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = filmActorTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := FilmActors(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFilmActorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	filmActorOne := &FilmActor{}
	filmActorTwo := &FilmActor{}
	if err = randomize.Struct(seed, filmActorOne, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}
	if err = randomize.Struct(seed, filmActorTwo, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActorOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = filmActorTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmActors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func filmActorBeforeInsertHook(e boil.Executor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorAfterInsertHook(e boil.Executor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorAfterSelectHook(e boil.Executor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorBeforeUpdateHook(e boil.Executor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorAfterUpdateHook(e boil.Executor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorBeforeDeleteHook(e boil.Executor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorAfterDeleteHook(e boil.Executor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorBeforeUpsertHook(e boil.Executor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorAfterUpsertHook(e boil.Executor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func testFilmActorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &FilmActor{}
	o := &FilmActor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, filmActorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FilmActor object: %s", err)
	}

	AddFilmActorHook(boil.BeforeInsertHook, filmActorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	filmActorBeforeInsertHooks = []FilmActorHook{}

	AddFilmActorHook(boil.AfterInsertHook, filmActorAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	filmActorAfterInsertHooks = []FilmActorHook{}

	AddFilmActorHook(boil.AfterSelectHook, filmActorAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	filmActorAfterSelectHooks = []FilmActorHook{}

	AddFilmActorHook(boil.BeforeUpdateHook, filmActorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	filmActorBeforeUpdateHooks = []FilmActorHook{}

	AddFilmActorHook(boil.AfterUpdateHook, filmActorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	filmActorAfterUpdateHooks = []FilmActorHook{}

	AddFilmActorHook(boil.BeforeDeleteHook, filmActorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	filmActorBeforeDeleteHooks = []FilmActorHook{}

	AddFilmActorHook(boil.AfterDeleteHook, filmActorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	filmActorAfterDeleteHooks = []FilmActorHook{}

	AddFilmActorHook(boil.BeforeUpsertHook, filmActorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	filmActorBeforeUpsertHooks = []FilmActorHook{}

	AddFilmActorHook(boil.AfterUpsertHook, filmActorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	filmActorAfterUpsertHooks = []FilmActorHook{}
}
func testFilmActorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmActors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFilmActorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx, filmActorColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := FilmActors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFilmActorToOneActorUsingActor(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local FilmActor
	var foreign Actor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, actorDBTypes, false, actorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Actor struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ActorID = foreign.ActorID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Actor(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ActorID != foreign.ActorID {
		t.Errorf("want: %v, got %v", foreign.ActorID, check.ActorID)
	}

	slice := FilmActorSlice{&local}
	if err = local.L.LoadActor(tx, false, (*[]*FilmActor)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Actor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Actor = nil
	if err = local.L.LoadActor(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Actor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFilmActorToOneFilmUsingFilm(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local FilmActor
	var foreign Film

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, filmDBTypes, false, filmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Film struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.FilmID = foreign.FilmID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Film(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.FilmID != foreign.FilmID {
		t.Errorf("want: %v, got %v", foreign.FilmID, check.FilmID)
	}

	slice := FilmActorSlice{&local}
	if err = local.L.LoadFilm(tx, false, (*[]*FilmActor)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Film = nil
	if err = local.L.LoadFilm(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFilmActorToOneSetOpActorUsingActor(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a FilmActor
	var b, c Actor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, filmActorDBTypes, false, strmangle.SetComplement(filmActorPrimaryKeyColumns, filmActorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, actorDBTypes, false, strmangle.SetComplement(actorPrimaryKeyColumns, actorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, actorDBTypes, false, strmangle.SetComplement(actorPrimaryKeyColumns, actorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Actor{&b, &c} {
		err = a.SetActor(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Actor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FilmActors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ActorID != x.ActorID {
			t.Error("foreign key was wrong value", a.ActorID)
		}

		if exists, err := FilmActorExists(tx, a.ActorID, a.FilmID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testFilmActorToOneSetOpFilmUsingFilm(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a FilmActor
	var b, c Film

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, filmActorDBTypes, false, strmangle.SetComplement(filmActorPrimaryKeyColumns, filmActorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Film{&b, &c} {
		err = a.SetFilm(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Film != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FilmActors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FilmID != x.FilmID {
			t.Error("foreign key was wrong value", a.FilmID)
		}

		if exists, err := FilmActorExists(tx, a.ActorID, a.FilmID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testFilmActorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = filmActor.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testFilmActorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FilmActorSlice{filmActor}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testFilmActorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := FilmActors(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	filmActorDBTypes = map[string]string{`ActorID`: `smallint`, `FilmID`: `smallint`, `LastUpdate`: `timestamp`}
	_                = bytes.MinRead
)

func testFilmActorsUpdate(t *testing.T) {
	t.Parallel()

	if len(filmActorColumns) == len(filmActorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmActors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	if err = filmActor.Update(tx); err != nil {
		t.Error(err)
	}
}

func testFilmActorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(filmActorColumns) == len(filmActorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	filmActor := &FilmActor{}
	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FilmActors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, filmActor, filmActorDBTypes, true, filmActorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(filmActorColumns, filmActorPrimaryKeyColumns) {
		fields = filmActorColumns
	} else {
		fields = strmangle.SetComplement(
			filmActorColumns,
			filmActorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(filmActor))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := FilmActorSlice{filmActor}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testFilmActorsUpsert(t *testing.T) {
	t.Parallel()

	if len(filmActorColumns) == len(filmActorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	filmActor := FilmActor{}
	if err = randomize.Struct(seed, &filmActor, filmActorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = filmActor.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert FilmActor: %s", err)
	}

	count, err := FilmActors(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &filmActor, filmActorDBTypes, false, filmActorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	if err = filmActor.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert FilmActor: %s", err)
	}

	count, err = FilmActors(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
