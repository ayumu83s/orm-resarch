// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Film is an object representing the database table.
type Film struct {
	FilmID             uint16      `boil:"film_id" json:"film_id" toml:"film_id" yaml:"film_id"`
	Title              string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description        null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ReleaseYear        null.String `boil:"release_year" json:"release_year,omitempty" toml:"release_year" yaml:"release_year,omitempty"`
	LanguageID         uint8       `boil:"language_id" json:"language_id" toml:"language_id" yaml:"language_id"`
	OriginalLanguageID null.Uint8  `boil:"original_language_id" json:"original_language_id,omitempty" toml:"original_language_id" yaml:"original_language_id,omitempty"`
	RentalDuration     uint8       `boil:"rental_duration" json:"rental_duration" toml:"rental_duration" yaml:"rental_duration"`
	RentalRate         string      `boil:"rental_rate" json:"rental_rate" toml:"rental_rate" yaml:"rental_rate"`
	Length             null.Uint16 `boil:"length" json:"length,omitempty" toml:"length" yaml:"length,omitempty"`
	ReplacementCost    string      `boil:"replacement_cost" json:"replacement_cost" toml:"replacement_cost" yaml:"replacement_cost"`
	Rating             null.String `boil:"rating" json:"rating,omitempty" toml:"rating" yaml:"rating,omitempty"`
	SpecialFeatures    null.String `boil:"special_features" json:"special_features,omitempty" toml:"special_features" yaml:"special_features,omitempty"`
	LastUpdate         time.Time   `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *filmR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L filmL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FilmColumns = struct {
	FilmID             string
	Title              string
	Description        string
	ReleaseYear        string
	LanguageID         string
	OriginalLanguageID string
	RentalDuration     string
	RentalRate         string
	Length             string
	ReplacementCost    string
	Rating             string
	SpecialFeatures    string
	LastUpdate         string
}{
	FilmID:             "film_id",
	Title:              "title",
	Description:        "description",
	ReleaseYear:        "release_year",
	LanguageID:         "language_id",
	OriginalLanguageID: "original_language_id",
	RentalDuration:     "rental_duration",
	RentalRate:         "rental_rate",
	Length:             "length",
	ReplacementCost:    "replacement_cost",
	Rating:             "rating",
	SpecialFeatures:    "special_features",
	LastUpdate:         "last_update",
}

// filmR is where relationships are stored.
type filmR struct {
	Language         *Language
	OriginalLanguage *Language
	FilmActors       FilmActorSlice
	FilmCategories   FilmCategorySlice
	Inventories      InventorySlice
}

// filmL is where Load methods for each relationship are stored.
type filmL struct{}

var (
	filmColumns               = []string{"film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"}
	filmColumnsWithoutDefault = []string{"title", "description", "release_year", "language_id", "original_language_id", "length", "special_features"}
	filmColumnsWithDefault    = []string{"film_id", "rental_duration", "rental_rate", "replacement_cost", "rating", "last_update"}
	filmPrimaryKeyColumns     = []string{"film_id"}
)

type (
	// FilmSlice is an alias for a slice of pointers to Film.
	// This should generally be used opposed to []Film.
	FilmSlice []*Film
	// FilmHook is the signature for custom Film hook methods
	FilmHook func(boil.Executor, *Film) error

	filmQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	filmType                 = reflect.TypeOf(&Film{})
	filmMapping              = queries.MakeStructMapping(filmType)
	filmPrimaryKeyMapping, _ = queries.BindMapping(filmType, filmMapping, filmPrimaryKeyColumns)
	filmInsertCacheMut       sync.RWMutex
	filmInsertCache          = make(map[string]insertCache)
	filmUpdateCacheMut       sync.RWMutex
	filmUpdateCache          = make(map[string]updateCache)
	filmUpsertCacheMut       sync.RWMutex
	filmUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var filmBeforeInsertHooks []FilmHook
var filmBeforeUpdateHooks []FilmHook
var filmBeforeDeleteHooks []FilmHook
var filmBeforeUpsertHooks []FilmHook

var filmAfterInsertHooks []FilmHook
var filmAfterSelectHooks []FilmHook
var filmAfterUpdateHooks []FilmHook
var filmAfterDeleteHooks []FilmHook
var filmAfterUpsertHooks []FilmHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Film) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filmBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Film) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range filmBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Film) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range filmBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Film) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filmBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Film) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filmAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Film) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range filmAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Film) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range filmAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Film) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range filmAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Film) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filmAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFilmHook registers your hook function for all future operations.
func AddFilmHook(hookPoint boil.HookPoint, filmHook FilmHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		filmBeforeInsertHooks = append(filmBeforeInsertHooks, filmHook)
	case boil.BeforeUpdateHook:
		filmBeforeUpdateHooks = append(filmBeforeUpdateHooks, filmHook)
	case boil.BeforeDeleteHook:
		filmBeforeDeleteHooks = append(filmBeforeDeleteHooks, filmHook)
	case boil.BeforeUpsertHook:
		filmBeforeUpsertHooks = append(filmBeforeUpsertHooks, filmHook)
	case boil.AfterInsertHook:
		filmAfterInsertHooks = append(filmAfterInsertHooks, filmHook)
	case boil.AfterSelectHook:
		filmAfterSelectHooks = append(filmAfterSelectHooks, filmHook)
	case boil.AfterUpdateHook:
		filmAfterUpdateHooks = append(filmAfterUpdateHooks, filmHook)
	case boil.AfterDeleteHook:
		filmAfterDeleteHooks = append(filmAfterDeleteHooks, filmHook)
	case boil.AfterUpsertHook:
		filmAfterUpsertHooks = append(filmAfterUpsertHooks, filmHook)
	}
}

// OneP returns a single film record from the query, and panics on error.
func (q filmQuery) OneP() *Film {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single film record from the query.
func (q filmQuery) One() (*Film, error) {
	o := &Film{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for film")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Film records from the query, and panics on error.
func (q filmQuery) AllP() FilmSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Film records from the query.
func (q filmQuery) All() (FilmSlice, error) {
	var o []*Film

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Film slice")
	}

	if len(filmAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Film records in the query, and panics on error.
func (q filmQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Film records in the query.
func (q filmQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count film rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q filmQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q filmQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if film exists")
	}

	return count > 0, nil
}

// LanguageG pointed to by the foreign key.
func (o *Film) LanguageG(mods ...qm.QueryMod) languageQuery {
	return o.Language(boil.GetDB(), mods...)
}

// Language pointed to by the foreign key.
func (o *Film) Language(exec boil.Executor, mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("language_id=?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	query := Languages(exec, queryMods...)
	queries.SetFrom(query.Query, "`language`")

	return query
}

// OriginalLanguageG pointed to by the foreign key.
func (o *Film) OriginalLanguageG(mods ...qm.QueryMod) languageQuery {
	return o.OriginalLanguage(boil.GetDB(), mods...)
}

// OriginalLanguage pointed to by the foreign key.
func (o *Film) OriginalLanguage(exec boil.Executor, mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("language_id=?", o.OriginalLanguageID),
	}

	queryMods = append(queryMods, mods...)

	query := Languages(exec, queryMods...)
	queries.SetFrom(query.Query, "`language`")

	return query
}

// FilmActorsG retrieves all the film_actor's film actor.
func (o *Film) FilmActorsG(mods ...qm.QueryMod) filmActorQuery {
	return o.FilmActors(boil.GetDB(), mods...)
}

// FilmActors retrieves all the film_actor's film actor with an executor.
func (o *Film) FilmActors(exec boil.Executor, mods ...qm.QueryMod) filmActorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`film_actor`.`film_id`=?", o.FilmID),
	)

	query := FilmActors(exec, queryMods...)
	queries.SetFrom(query.Query, "`film_actor`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`film_actor`.*"})
	}

	return query
}

// FilmCategoriesG retrieves all the film_category's film category.
func (o *Film) FilmCategoriesG(mods ...qm.QueryMod) filmCategoryQuery {
	return o.FilmCategories(boil.GetDB(), mods...)
}

// FilmCategories retrieves all the film_category's film category with an executor.
func (o *Film) FilmCategories(exec boil.Executor, mods ...qm.QueryMod) filmCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`film_category`.`film_id`=?", o.FilmID),
	)

	query := FilmCategories(exec, queryMods...)
	queries.SetFrom(query.Query, "`film_category`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`film_category`.*"})
	}

	return query
}

// InventoriesG retrieves all the inventory's inventory.
func (o *Film) InventoriesG(mods ...qm.QueryMod) inventoryQuery {
	return o.Inventories(boil.GetDB(), mods...)
}

// Inventories retrieves all the inventory's inventory with an executor.
func (o *Film) Inventories(exec boil.Executor, mods ...qm.QueryMod) inventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`inventory`.`film_id`=?", o.FilmID),
	)

	query := Inventories(exec, queryMods...)
	queries.SetFrom(query.Query, "`inventory`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`inventory`.*"})
	}

	return query
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (filmL) LoadLanguage(e boil.Executor, singular bool, maybeFilm interface{}) error {
	var slice []*Film
	var object *Film

	count := 1
	if singular {
		object = maybeFilm.(*Film)
	} else {
		slice = *maybeFilm.(*[]*Film)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &filmR{}
		}
		args[0] = object.LanguageID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &filmR{}
			}
			args[i] = obj.LanguageID
		}
	}

	query := fmt.Sprintf(
		"select * from `language` where `language_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}
	defer results.Close()

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if len(filmAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Language = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LanguageID == foreign.LanguageID {
				local.R.Language = foreign
				break
			}
		}
	}

	return nil
}

// LoadOriginalLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (filmL) LoadOriginalLanguage(e boil.Executor, singular bool, maybeFilm interface{}) error {
	var slice []*Film
	var object *Film

	count := 1
	if singular {
		object = maybeFilm.(*Film)
	} else {
		slice = *maybeFilm.(*[]*Film)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &filmR{}
		}
		args[0] = object.OriginalLanguageID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &filmR{}
			}
			args[i] = obj.OriginalLanguageID
		}
	}

	query := fmt.Sprintf(
		"select * from `language` where `language_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}
	defer results.Close()

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if len(filmAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.OriginalLanguage = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OriginalLanguageID.Uint8 == foreign.LanguageID {
				local.R.OriginalLanguage = foreign
				break
			}
		}
	}

	return nil
}

// LoadFilmActors allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (filmL) LoadFilmActors(e boil.Executor, singular bool, maybeFilm interface{}) error {
	var slice []*Film
	var object *Film

	count := 1
	if singular {
		object = maybeFilm.(*Film)
	} else {
		slice = *maybeFilm.(*[]*Film)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &filmR{}
		}
		args[0] = object.FilmID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &filmR{}
			}
			args[i] = obj.FilmID
		}
	}

	query := fmt.Sprintf(
		"select * from `film_actor` where `film_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load film_actor")
	}
	defer results.Close()

	var resultSlice []*FilmActor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice film_actor")
	}

	if len(filmActorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FilmActors = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FilmID == foreign.FilmID {
				local.R.FilmActors = append(local.R.FilmActors, foreign)
				break
			}
		}
	}

	return nil
}

// LoadFilmCategories allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (filmL) LoadFilmCategories(e boil.Executor, singular bool, maybeFilm interface{}) error {
	var slice []*Film
	var object *Film

	count := 1
	if singular {
		object = maybeFilm.(*Film)
	} else {
		slice = *maybeFilm.(*[]*Film)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &filmR{}
		}
		args[0] = object.FilmID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &filmR{}
			}
			args[i] = obj.FilmID
		}
	}

	query := fmt.Sprintf(
		"select * from `film_category` where `film_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load film_category")
	}
	defer results.Close()

	var resultSlice []*FilmCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice film_category")
	}

	if len(filmCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FilmCategories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FilmID == foreign.FilmID {
				local.R.FilmCategories = append(local.R.FilmCategories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInventories allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (filmL) LoadInventories(e boil.Executor, singular bool, maybeFilm interface{}) error {
	var slice []*Film
	var object *Film

	count := 1
	if singular {
		object = maybeFilm.(*Film)
	} else {
		slice = *maybeFilm.(*[]*Film)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &filmR{}
		}
		args[0] = object.FilmID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &filmR{}
			}
			args[i] = obj.FilmID
		}
	}

	query := fmt.Sprintf(
		"select * from `inventory` where `film_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load inventory")
	}
	defer results.Close()

	var resultSlice []*Inventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice inventory")
	}

	if len(inventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Inventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FilmID == foreign.FilmID {
				local.R.Inventories = append(local.R.Inventories, foreign)
				break
			}
		}
	}

	return nil
}

// SetLanguageG of the film to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.Films.
// Uses the global database handle.
func (o *Film) SetLanguageG(insert bool, related *Language) error {
	return o.SetLanguage(boil.GetDB(), insert, related)
}

// SetLanguageP of the film to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.Films.
// Panics on error.
func (o *Film) SetLanguageP(exec boil.Executor, insert bool, related *Language) {
	if err := o.SetLanguage(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLanguageGP of the film to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.Films.
// Uses the global database handle and panics on error.
func (o *Film) SetLanguageGP(insert bool, related *Language) {
	if err := o.SetLanguage(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLanguage of the film to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.Films.
func (o *Film) SetLanguage(exec boil.Executor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `film` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"language_id"}),
		strmangle.WhereClause("`", "`", 0, filmPrimaryKeyColumns),
	)
	values := []interface{}{related.LanguageID, o.FilmID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LanguageID = related.LanguageID

	if o.R == nil {
		o.R = &filmR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			Films: FilmSlice{o},
		}
	} else {
		related.R.Films = append(related.R.Films, o)
	}

	return nil
}

// SetOriginalLanguageG of the film to the related item.
// Sets o.R.OriginalLanguage to related.
// Adds o to related.R.OriginalLanguageFilms.
// Uses the global database handle.
func (o *Film) SetOriginalLanguageG(insert bool, related *Language) error {
	return o.SetOriginalLanguage(boil.GetDB(), insert, related)
}

// SetOriginalLanguageP of the film to the related item.
// Sets o.R.OriginalLanguage to related.
// Adds o to related.R.OriginalLanguageFilms.
// Panics on error.
func (o *Film) SetOriginalLanguageP(exec boil.Executor, insert bool, related *Language) {
	if err := o.SetOriginalLanguage(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOriginalLanguageGP of the film to the related item.
// Sets o.R.OriginalLanguage to related.
// Adds o to related.R.OriginalLanguageFilms.
// Uses the global database handle and panics on error.
func (o *Film) SetOriginalLanguageGP(insert bool, related *Language) {
	if err := o.SetOriginalLanguage(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOriginalLanguage of the film to the related item.
// Sets o.R.OriginalLanguage to related.
// Adds o to related.R.OriginalLanguageFilms.
func (o *Film) SetOriginalLanguage(exec boil.Executor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `film` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"original_language_id"}),
		strmangle.WhereClause("`", "`", 0, filmPrimaryKeyColumns),
	)
	values := []interface{}{related.LanguageID, o.FilmID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OriginalLanguageID.Uint8 = related.LanguageID
	o.OriginalLanguageID.Valid = true

	if o.R == nil {
		o.R = &filmR{
			OriginalLanguage: related,
		}
	} else {
		o.R.OriginalLanguage = related
	}

	if related.R == nil {
		related.R = &languageR{
			OriginalLanguageFilms: FilmSlice{o},
		}
	} else {
		related.R.OriginalLanguageFilms = append(related.R.OriginalLanguageFilms, o)
	}

	return nil
}

// RemoveOriginalLanguageG relationship.
// Sets o.R.OriginalLanguage to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Film) RemoveOriginalLanguageG(related *Language) error {
	return o.RemoveOriginalLanguage(boil.GetDB(), related)
}

// RemoveOriginalLanguageP relationship.
// Sets o.R.OriginalLanguage to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Film) RemoveOriginalLanguageP(exec boil.Executor, related *Language) {
	if err := o.RemoveOriginalLanguage(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOriginalLanguageGP relationship.
// Sets o.R.OriginalLanguage to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Film) RemoveOriginalLanguageGP(related *Language) {
	if err := o.RemoveOriginalLanguage(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOriginalLanguage relationship.
// Sets o.R.OriginalLanguage to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Film) RemoveOriginalLanguage(exec boil.Executor, related *Language) error {
	var err error

	o.OriginalLanguageID.Valid = false
	if err = o.Update(exec, "original_language_id"); err != nil {
		o.OriginalLanguageID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.OriginalLanguage = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OriginalLanguageFilms {
		if o.OriginalLanguageID.Uint8 != ri.OriginalLanguageID.Uint8 {
			continue
		}

		ln := len(related.R.OriginalLanguageFilms)
		if ln > 1 && i < ln-1 {
			related.R.OriginalLanguageFilms[i] = related.R.OriginalLanguageFilms[ln-1]
		}
		related.R.OriginalLanguageFilms = related.R.OriginalLanguageFilms[:ln-1]
		break
	}
	return nil
}

// AddFilmActorsG adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.FilmActors.
// Sets related.R.Film appropriately.
// Uses the global database handle.
func (o *Film) AddFilmActorsG(insert bool, related ...*FilmActor) error {
	return o.AddFilmActors(boil.GetDB(), insert, related...)
}

// AddFilmActorsP adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.FilmActors.
// Sets related.R.Film appropriately.
// Panics on error.
func (o *Film) AddFilmActorsP(exec boil.Executor, insert bool, related ...*FilmActor) {
	if err := o.AddFilmActors(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFilmActorsGP adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.FilmActors.
// Sets related.R.Film appropriately.
// Uses the global database handle and panics on error.
func (o *Film) AddFilmActorsGP(insert bool, related ...*FilmActor) {
	if err := o.AddFilmActors(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFilmActors adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.FilmActors.
// Sets related.R.Film appropriately.
func (o *Film) AddFilmActors(exec boil.Executor, insert bool, related ...*FilmActor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FilmID = o.FilmID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `film_actor` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"film_id"}),
				strmangle.WhereClause("`", "`", 0, filmActorPrimaryKeyColumns),
			)
			values := []interface{}{o.FilmID, rel.ActorID, rel.FilmID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FilmID = o.FilmID
		}
	}

	if o.R == nil {
		o.R = &filmR{
			FilmActors: related,
		}
	} else {
		o.R.FilmActors = append(o.R.FilmActors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &filmActorR{
				Film: o,
			}
		} else {
			rel.R.Film = o
		}
	}
	return nil
}

// AddFilmCategoriesG adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.FilmCategories.
// Sets related.R.Film appropriately.
// Uses the global database handle.
func (o *Film) AddFilmCategoriesG(insert bool, related ...*FilmCategory) error {
	return o.AddFilmCategories(boil.GetDB(), insert, related...)
}

// AddFilmCategoriesP adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.FilmCategories.
// Sets related.R.Film appropriately.
// Panics on error.
func (o *Film) AddFilmCategoriesP(exec boil.Executor, insert bool, related ...*FilmCategory) {
	if err := o.AddFilmCategories(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFilmCategoriesGP adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.FilmCategories.
// Sets related.R.Film appropriately.
// Uses the global database handle and panics on error.
func (o *Film) AddFilmCategoriesGP(insert bool, related ...*FilmCategory) {
	if err := o.AddFilmCategories(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFilmCategories adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.FilmCategories.
// Sets related.R.Film appropriately.
func (o *Film) AddFilmCategories(exec boil.Executor, insert bool, related ...*FilmCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FilmID = o.FilmID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `film_category` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"film_id"}),
				strmangle.WhereClause("`", "`", 0, filmCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.FilmID, rel.FilmID, rel.CategoryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FilmID = o.FilmID
		}
	}

	if o.R == nil {
		o.R = &filmR{
			FilmCategories: related,
		}
	} else {
		o.R.FilmCategories = append(o.R.FilmCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &filmCategoryR{
				Film: o,
			}
		} else {
			rel.R.Film = o
		}
	}
	return nil
}

// AddInventoriesG adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.Inventories.
// Sets related.R.Film appropriately.
// Uses the global database handle.
func (o *Film) AddInventoriesG(insert bool, related ...*Inventory) error {
	return o.AddInventories(boil.GetDB(), insert, related...)
}

// AddInventoriesP adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.Inventories.
// Sets related.R.Film appropriately.
// Panics on error.
func (o *Film) AddInventoriesP(exec boil.Executor, insert bool, related ...*Inventory) {
	if err := o.AddInventories(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInventoriesGP adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.Inventories.
// Sets related.R.Film appropriately.
// Uses the global database handle and panics on error.
func (o *Film) AddInventoriesGP(insert bool, related ...*Inventory) {
	if err := o.AddInventories(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInventories adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.Inventories.
// Sets related.R.Film appropriately.
func (o *Film) AddInventories(exec boil.Executor, insert bool, related ...*Inventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FilmID = o.FilmID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `inventory` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"film_id"}),
				strmangle.WhereClause("`", "`", 0, inventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.FilmID, rel.InventoryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FilmID = o.FilmID
		}
	}

	if o.R == nil {
		o.R = &filmR{
			Inventories: related,
		}
	} else {
		o.R.Inventories = append(o.R.Inventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inventoryR{
				Film: o,
			}
		} else {
			rel.R.Film = o
		}
	}
	return nil
}

// FilmsG retrieves all records.
func FilmsG(mods ...qm.QueryMod) filmQuery {
	return Films(boil.GetDB(), mods...)
}

// Films retrieves all the records using an executor.
func Films(exec boil.Executor, mods ...qm.QueryMod) filmQuery {
	mods = append(mods, qm.From("`film`"))
	return filmQuery{NewQuery(exec, mods...)}
}

// FindFilmG retrieves a single record by ID.
func FindFilmG(filmID uint16, selectCols ...string) (*Film, error) {
	return FindFilm(boil.GetDB(), filmID, selectCols...)
}

// FindFilmGP retrieves a single record by ID, and panics on error.
func FindFilmGP(filmID uint16, selectCols ...string) *Film {
	retobj, err := FindFilm(boil.GetDB(), filmID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindFilm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFilm(exec boil.Executor, filmID uint16, selectCols ...string) (*Film, error) {
	filmObj := &Film{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `film` where `film_id`=?", sel,
	)

	q := queries.Raw(exec, query, filmID)

	err := q.Bind(filmObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from film")
	}

	return filmObj, nil
}

// FindFilmP retrieves a single record by ID with an executor, and panics on error.
func FindFilmP(exec boil.Executor, filmID uint16, selectCols ...string) *Film {
	retobj, err := FindFilm(exec, filmID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Film) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Film) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Film) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Film) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no film provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	filmInsertCacheMut.RLock()
	cache, cached := filmInsertCache[key]
	filmInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			filmColumns,
			filmColumnsWithDefault,
			filmColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(filmType, filmMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(filmType, filmMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `film` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `film` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `film` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, filmPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into film")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.FilmID = uint16(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == filmMapping["FilmID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FilmID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for film")
	}

CacheNoHooks:
	if !cached {
		filmInsertCacheMut.Lock()
		filmInsertCache[key] = cache
		filmInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Film record. See Update for
// whitelist behavior description.
func (o *Film) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Film record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Film) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Film, and panics on error.
// See Update for whitelist behavior description.
func (o *Film) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Film.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Film) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	filmUpdateCacheMut.RLock()
	cache, cached := filmUpdateCache[key]
	filmUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			filmColumns,
			filmPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("sqlboiler: unable to update film, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `film` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, filmPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(filmType, filmMapping, append(wl, filmPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update film row")
	}

	if !cached {
		filmUpdateCacheMut.Lock()
		filmUpdateCache[key] = cache
		filmUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q filmQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q filmQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all for film")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FilmSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o FilmSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o FilmSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FilmSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `film` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all in film slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Film) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Film) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Film) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Film) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no film provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	filmUpsertCacheMut.RLock()
	cache, cached := filmUpsertCache[key]
	filmUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			filmColumns,
			filmColumnsWithDefault,
			filmColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			filmColumns,
			filmPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert film, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "film", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `film` WHERE `film_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(filmType, filmMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(filmType, filmMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for film")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.FilmID = uint16(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == filmMapping["FilmID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FilmID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for film")
	}

CacheNoHooks:
	if !cached {
		filmUpsertCacheMut.Lock()
		filmUpsertCache[key] = cache
		filmUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Film record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Film) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Film record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Film) DeleteG() error {
	if o == nil {
		return errors.New("sqlboiler: no Film provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Film record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Film) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Film record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Film) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Film provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), filmPrimaryKeyMapping)
	sql := "DELETE FROM `film` WHERE `film_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete from film")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q filmQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q filmQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("sqlboiler: no filmQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from film")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o FilmSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o FilmSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("sqlboiler: no Film slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o FilmSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FilmSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Film slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(filmBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `film` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from film slice")
	}

	if len(filmAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Film) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Film) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Film) ReloadG() error {
	if o == nil {
		return errors.New("sqlboiler: no Film provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Film) Reload(exec boil.Executor) error {
	ret, err := FindFilm(exec, o.FilmID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *FilmSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *FilmSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilmSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("sqlboiler: empty FilmSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilmSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	films := FilmSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `film`.* FROM `film` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&films)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in FilmSlice")
	}

	*o = films

	return nil
}

// FilmExists checks if the Film row exists.
func FilmExists(exec boil.Executor, filmID uint16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `film` where `film_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, filmID)
	}

	row := exec.QueryRow(sql, filmID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if film exists")
	}

	return exists, nil
}

// FilmExistsG checks if the Film row exists.
func FilmExistsG(filmID uint16) (bool, error) {
	return FilmExists(boil.GetDB(), filmID)
}

// FilmExistsGP checks if the Film row exists. Panics on error.
func FilmExistsGP(filmID uint16) bool {
	e, err := FilmExists(boil.GetDB(), filmID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// FilmExistsP checks if the Film row exists. Panics on error.
func FilmExistsP(exec boil.Executor, filmID uint16) bool {
	e, err := FilmExists(exec, filmID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
