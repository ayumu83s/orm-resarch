// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Address is an object representing the database table.
type Address struct {
	AddressID  uint16      `boil:"address_id" json:"address_id" toml:"address_id" yaml:"address_id"`
	Address    string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	Address2   null.String `boil:"address2" json:"address2,omitempty" toml:"address2" yaml:"address2,omitempty"`
	District   string      `boil:"district" json:"district" toml:"district" yaml:"district"`
	CityID     uint16      `boil:"city_id" json:"city_id" toml:"city_id" yaml:"city_id"`
	PostalCode null.String `boil:"postal_code" json:"postal_code,omitempty" toml:"postal_code" yaml:"postal_code,omitempty"`
	Phone      string      `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	LastUpdate time.Time   `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *addressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L addressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AddressColumns = struct {
	AddressID  string
	Address    string
	Address2   string
	District   string
	CityID     string
	PostalCode string
	Phone      string
	LastUpdate string
}{
	AddressID:  "address_id",
	Address:    "address",
	Address2:   "address2",
	District:   "district",
	CityID:     "city_id",
	PostalCode: "postal_code",
	Phone:      "phone",
	LastUpdate: "last_update",
}

// addressR is where relationships are stored.
type addressR struct {
	City      *City
	Customers CustomerSlice
	Staffs    StaffSlice
	Stores    StoreSlice
}

// addressL is where Load methods for each relationship are stored.
type addressL struct{}

var (
	addressColumns               = []string{"address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update"}
	addressColumnsWithoutDefault = []string{"address", "address2", "district", "city_id", "postal_code", "phone"}
	addressColumnsWithDefault    = []string{"address_id", "last_update"}
	addressPrimaryKeyColumns     = []string{"address_id"}
)

type (
	// AddressSlice is an alias for a slice of pointers to Address.
	// This should generally be used opposed to []Address.
	AddressSlice []*Address
	// AddressHook is the signature for custom Address hook methods
	AddressHook func(boil.Executor, *Address) error

	addressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	addressType                 = reflect.TypeOf(&Address{})
	addressMapping              = queries.MakeStructMapping(addressType)
	addressPrimaryKeyMapping, _ = queries.BindMapping(addressType, addressMapping, addressPrimaryKeyColumns)
	addressInsertCacheMut       sync.RWMutex
	addressInsertCache          = make(map[string]insertCache)
	addressUpdateCacheMut       sync.RWMutex
	addressUpdateCache          = make(map[string]updateCache)
	addressUpsertCacheMut       sync.RWMutex
	addressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var addressBeforeInsertHooks []AddressHook
var addressBeforeUpdateHooks []AddressHook
var addressBeforeDeleteHooks []AddressHook
var addressBeforeUpsertHooks []AddressHook

var addressAfterInsertHooks []AddressHook
var addressAfterSelectHooks []AddressHook
var addressAfterUpdateHooks []AddressHook
var addressAfterDeleteHooks []AddressHook
var addressAfterUpsertHooks []AddressHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Address) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range addressBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Address) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range addressBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Address) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range addressBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Address) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range addressBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Address) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range addressAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Address) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range addressAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Address) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range addressAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Address) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range addressAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Address) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range addressAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAddressHook registers your hook function for all future operations.
func AddAddressHook(hookPoint boil.HookPoint, addressHook AddressHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		addressBeforeInsertHooks = append(addressBeforeInsertHooks, addressHook)
	case boil.BeforeUpdateHook:
		addressBeforeUpdateHooks = append(addressBeforeUpdateHooks, addressHook)
	case boil.BeforeDeleteHook:
		addressBeforeDeleteHooks = append(addressBeforeDeleteHooks, addressHook)
	case boil.BeforeUpsertHook:
		addressBeforeUpsertHooks = append(addressBeforeUpsertHooks, addressHook)
	case boil.AfterInsertHook:
		addressAfterInsertHooks = append(addressAfterInsertHooks, addressHook)
	case boil.AfterSelectHook:
		addressAfterSelectHooks = append(addressAfterSelectHooks, addressHook)
	case boil.AfterUpdateHook:
		addressAfterUpdateHooks = append(addressAfterUpdateHooks, addressHook)
	case boil.AfterDeleteHook:
		addressAfterDeleteHooks = append(addressAfterDeleteHooks, addressHook)
	case boil.AfterUpsertHook:
		addressAfterUpsertHooks = append(addressAfterUpsertHooks, addressHook)
	}
}

// OneP returns a single address record from the query, and panics on error.
func (q addressQuery) OneP() *Address {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single address record from the query.
func (q addressQuery) One() (*Address, error) {
	o := &Address{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for address")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Address records from the query, and panics on error.
func (q addressQuery) AllP() AddressSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Address records from the query.
func (q addressQuery) All() (AddressSlice, error) {
	var o []*Address

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Address slice")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Address records in the query, and panics on error.
func (q addressQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Address records in the query.
func (q addressQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count address rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q addressQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q addressQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if address exists")
	}

	return count > 0, nil
}

// CityG pointed to by the foreign key.
func (o *Address) CityG(mods ...qm.QueryMod) cityQuery {
	return o.City(boil.GetDB(), mods...)
}

// City pointed to by the foreign key.
func (o *Address) City(exec boil.Executor, mods ...qm.QueryMod) cityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("city_id=?", o.CityID),
	}

	queryMods = append(queryMods, mods...)

	query := Cities(exec, queryMods...)
	queries.SetFrom(query.Query, "`city`")

	return query
}

// CustomersG retrieves all the customer's customer.
func (o *Address) CustomersG(mods ...qm.QueryMod) customerQuery {
	return o.Customers(boil.GetDB(), mods...)
}

// Customers retrieves all the customer's customer with an executor.
func (o *Address) Customers(exec boil.Executor, mods ...qm.QueryMod) customerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`customer`.`address_id`=?", o.AddressID),
	)

	query := Customers(exec, queryMods...)
	queries.SetFrom(query.Query, "`customer`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`customer`.*"})
	}

	return query
}

// StaffsG retrieves all the staff's staff.
func (o *Address) StaffsG(mods ...qm.QueryMod) staffQuery {
	return o.Staffs(boil.GetDB(), mods...)
}

// Staffs retrieves all the staff's staff with an executor.
func (o *Address) Staffs(exec boil.Executor, mods ...qm.QueryMod) staffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`staff`.`address_id`=?", o.AddressID),
	)

	query := Staffs(exec, queryMods...)
	queries.SetFrom(query.Query, "`staff`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`staff`.*"})
	}

	return query
}

// StoresG retrieves all the store's store.
func (o *Address) StoresG(mods ...qm.QueryMod) storeQuery {
	return o.Stores(boil.GetDB(), mods...)
}

// Stores retrieves all the store's store with an executor.
func (o *Address) Stores(exec boil.Executor, mods ...qm.QueryMod) storeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`store`.`address_id`=?", o.AddressID),
	)

	query := Stores(exec, queryMods...)
	queries.SetFrom(query.Query, "`store`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`store`.*"})
	}

	return query
}

// LoadCity allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (addressL) LoadCity(e boil.Executor, singular bool, maybeAddress interface{}) error {
	var slice []*Address
	var object *Address

	count := 1
	if singular {
		object = maybeAddress.(*Address)
	} else {
		slice = *maybeAddress.(*[]*Address)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args[0] = object.CityID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}
			args[i] = obj.CityID
		}
	}

	query := fmt.Sprintf(
		"select * from `city` where `city_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load City")
	}
	defer results.Close()

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice City")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.City = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CityID == foreign.CityID {
				local.R.City = foreign
				break
			}
		}
	}

	return nil
}

// LoadCustomers allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (addressL) LoadCustomers(e boil.Executor, singular bool, maybeAddress interface{}) error {
	var slice []*Address
	var object *Address

	count := 1
	if singular {
		object = maybeAddress.(*Address)
	} else {
		slice = *maybeAddress.(*[]*Address)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args[0] = object.AddressID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}
			args[i] = obj.AddressID
		}
	}

	query := fmt.Sprintf(
		"select * from `customer` where `address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load customer")
	}
	defer results.Close()

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice customer")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Customers = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AddressID == foreign.AddressID {
				local.R.Customers = append(local.R.Customers, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStaffs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (addressL) LoadStaffs(e boil.Executor, singular bool, maybeAddress interface{}) error {
	var slice []*Address
	var object *Address

	count := 1
	if singular {
		object = maybeAddress.(*Address)
	} else {
		slice = *maybeAddress.(*[]*Address)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args[0] = object.AddressID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}
			args[i] = obj.AddressID
		}
	}

	query := fmt.Sprintf(
		"select * from `staff` where `address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staff")
	}
	defer results.Close()

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice staff")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Staffs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AddressID == foreign.AddressID {
				local.R.Staffs = append(local.R.Staffs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStores allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (addressL) LoadStores(e boil.Executor, singular bool, maybeAddress interface{}) error {
	var slice []*Address
	var object *Address

	count := 1
	if singular {
		object = maybeAddress.(*Address)
	} else {
		slice = *maybeAddress.(*[]*Address)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args[0] = object.AddressID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}
			args[i] = obj.AddressID
		}
	}

	query := fmt.Sprintf(
		"select * from `store` where `address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load store")
	}
	defer results.Close()

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice store")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Stores = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AddressID == foreign.AddressID {
				local.R.Stores = append(local.R.Stores, foreign)
				break
			}
		}
	}

	return nil
}

// SetCityG of the address to the related item.
// Sets o.R.City to related.
// Adds o to related.R.Addresses.
// Uses the global database handle.
func (o *Address) SetCityG(insert bool, related *City) error {
	return o.SetCity(boil.GetDB(), insert, related)
}

// SetCityP of the address to the related item.
// Sets o.R.City to related.
// Adds o to related.R.Addresses.
// Panics on error.
func (o *Address) SetCityP(exec boil.Executor, insert bool, related *City) {
	if err := o.SetCity(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCityGP of the address to the related item.
// Sets o.R.City to related.
// Adds o to related.R.Addresses.
// Uses the global database handle and panics on error.
func (o *Address) SetCityGP(insert bool, related *City) {
	if err := o.SetCity(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCity of the address to the related item.
// Sets o.R.City to related.
// Adds o to related.R.Addresses.
func (o *Address) SetCity(exec boil.Executor, insert bool, related *City) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"city_id"}),
		strmangle.WhereClause("`", "`", 0, addressPrimaryKeyColumns),
	)
	values := []interface{}{related.CityID, o.AddressID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CityID = related.CityID

	if o.R == nil {
		o.R = &addressR{
			City: related,
		}
	} else {
		o.R.City = related
	}

	if related.R == nil {
		related.R = &cityR{
			Addresses: AddressSlice{o},
		}
	} else {
		related.R.Addresses = append(related.R.Addresses, o)
	}

	return nil
}

// AddCustomersG adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.Address appropriately.
// Uses the global database handle.
func (o *Address) AddCustomersG(insert bool, related ...*Customer) error {
	return o.AddCustomers(boil.GetDB(), insert, related...)
}

// AddCustomersP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.Address appropriately.
// Panics on error.
func (o *Address) AddCustomersP(exec boil.Executor, insert bool, related ...*Customer) {
	if err := o.AddCustomers(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCustomersGP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.Address appropriately.
// Uses the global database handle and panics on error.
func (o *Address) AddCustomersGP(insert bool, related ...*Customer) {
	if err := o.AddCustomers(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCustomers adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.Address appropriately.
func (o *Address) AddCustomers(exec boil.Executor, insert bool, related ...*Customer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.AddressID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `customer` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
				strmangle.WhereClause("`", "`", 0, customerPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.CustomerID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.AddressID
		}
	}

	if o.R == nil {
		o.R = &addressR{
			Customers: related,
		}
	} else {
		o.R.Customers = append(o.R.Customers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &customerR{
				Address: o,
			}
		} else {
			rel.R.Address = o
		}
	}
	return nil
}

// AddStaffsG adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Address appropriately.
// Uses the global database handle.
func (o *Address) AddStaffsG(insert bool, related ...*Staff) error {
	return o.AddStaffs(boil.GetDB(), insert, related...)
}

// AddStaffsP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Address appropriately.
// Panics on error.
func (o *Address) AddStaffsP(exec boil.Executor, insert bool, related ...*Staff) {
	if err := o.AddStaffs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStaffsGP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Address appropriately.
// Uses the global database handle and panics on error.
func (o *Address) AddStaffsGP(insert bool, related ...*Staff) {
	if err := o.AddStaffs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStaffs adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Address appropriately.
func (o *Address) AddStaffs(exec boil.Executor, insert bool, related ...*Staff) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.AddressID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `staff` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
				strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.StaffID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.AddressID
		}
	}

	if o.R == nil {
		o.R = &addressR{
			Staffs: related,
		}
	} else {
		o.R.Staffs = append(o.R.Staffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staffR{
				Address: o,
			}
		} else {
			rel.R.Address = o
		}
	}
	return nil
}

// AddStoresG adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Stores.
// Sets related.R.Address appropriately.
// Uses the global database handle.
func (o *Address) AddStoresG(insert bool, related ...*Store) error {
	return o.AddStores(boil.GetDB(), insert, related...)
}

// AddStoresP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Stores.
// Sets related.R.Address appropriately.
// Panics on error.
func (o *Address) AddStoresP(exec boil.Executor, insert bool, related ...*Store) {
	if err := o.AddStores(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStoresGP adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Stores.
// Sets related.R.Address appropriately.
// Uses the global database handle and panics on error.
func (o *Address) AddStoresGP(insert bool, related ...*Store) {
	if err := o.AddStores(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStores adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Stores.
// Sets related.R.Address appropriately.
func (o *Address) AddStores(exec boil.Executor, insert bool, related ...*Store) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.AddressID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `store` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
				strmangle.WhereClause("`", "`", 0, storePrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.StoreID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.AddressID
		}
	}

	if o.R == nil {
		o.R = &addressR{
			Stores: related,
		}
	} else {
		o.R.Stores = append(o.R.Stores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeR{
				Address: o,
			}
		} else {
			rel.R.Address = o
		}
	}
	return nil
}

// AddressesG retrieves all records.
func AddressesG(mods ...qm.QueryMod) addressQuery {
	return Addresses(boil.GetDB(), mods...)
}

// Addresses retrieves all the records using an executor.
func Addresses(exec boil.Executor, mods ...qm.QueryMod) addressQuery {
	mods = append(mods, qm.From("`address`"))
	return addressQuery{NewQuery(exec, mods...)}
}

// FindAddressG retrieves a single record by ID.
func FindAddressG(addressID uint16, selectCols ...string) (*Address, error) {
	return FindAddress(boil.GetDB(), addressID, selectCols...)
}

// FindAddressGP retrieves a single record by ID, and panics on error.
func FindAddressGP(addressID uint16, selectCols ...string) *Address {
	retobj, err := FindAddress(boil.GetDB(), addressID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAddress(exec boil.Executor, addressID uint16, selectCols ...string) (*Address, error) {
	addressObj := &Address{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `address` where `address_id`=?", sel,
	)

	q := queries.Raw(exec, query, addressID)

	err := q.Bind(addressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from address")
	}

	return addressObj, nil
}

// FindAddressP retrieves a single record by ID with an executor, and panics on error.
func FindAddressP(exec boil.Executor, addressID uint16, selectCols ...string) *Address {
	retobj, err := FindAddress(exec, addressID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Address) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Address) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Address) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Address) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no address provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(addressColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	addressInsertCacheMut.RLock()
	cache, cached := addressInsertCache[key]
	addressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			addressColumns,
			addressColumnsWithDefault,
			addressColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(addressType, addressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `address` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `address` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `address` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, addressPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into address")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.AddressID = uint16(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == addressMapping["AddressID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AddressID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for address")
	}

CacheNoHooks:
	if !cached {
		addressInsertCacheMut.Lock()
		addressInsertCache[key] = cache
		addressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Address record. See Update for
// whitelist behavior description.
func (o *Address) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Address record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Address) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Address, and panics on error.
// See Update for whitelist behavior description.
func (o *Address) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Address.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Address) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	addressUpdateCacheMut.RLock()
	cache, cached := addressUpdateCache[key]
	addressUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			addressColumns,
			addressPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("sqlboiler: unable to update address, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `address` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, addressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, append(wl, addressPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update address row")
	}

	if !cached {
		addressUpdateCacheMut.Lock()
		addressUpdateCache[key] = cache
		addressUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q addressQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q addressQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all for address")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AddressSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AddressSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AddressSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AddressSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, addressPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all in address slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Address) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Address) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Address) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Address) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no address provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(addressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	addressUpsertCacheMut.RLock()
	cache, cached := addressUpsertCache[key]
	addressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			addressColumns,
			addressColumnsWithDefault,
			addressColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			addressColumns,
			addressPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert address, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "address", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `address` WHERE `address_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(addressType, addressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for address")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.AddressID = uint16(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == addressMapping["AddressID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AddressID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for address")
	}

CacheNoHooks:
	if !cached {
		addressUpsertCacheMut.Lock()
		addressUpsertCache[key] = cache
		addressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Address record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Address) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Address record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Address) DeleteG() error {
	if o == nil {
		return errors.New("sqlboiler: no Address provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Address record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Address) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Address record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Address) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Address provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), addressPrimaryKeyMapping)
	sql := "DELETE FROM `address` WHERE `address_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete from address")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q addressQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q addressQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("sqlboiler: no addressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from address")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AddressSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AddressSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("sqlboiler: no Address slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AddressSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AddressSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Address slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(addressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, addressPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from address slice")
	}

	if len(addressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Address) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Address) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Address) ReloadG() error {
	if o == nil {
		return errors.New("sqlboiler: no Address provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Address) Reload(exec boil.Executor) error {
	ret, err := FindAddress(exec, o.AddressID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AddressSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AddressSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AddressSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("sqlboiler: empty AddressSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AddressSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	addresses := AddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `address`.* FROM `address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, addressPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&addresses)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in AddressSlice")
	}

	*o = addresses

	return nil
}

// AddressExists checks if the Address row exists.
func AddressExists(exec boil.Executor, addressID uint16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `address` where `address_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, addressID)
	}

	row := exec.QueryRow(sql, addressID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if address exists")
	}

	return exists, nil
}

// AddressExistsG checks if the Address row exists.
func AddressExistsG(addressID uint16) (bool, error) {
	return AddressExists(boil.GetDB(), addressID)
}

// AddressExistsGP checks if the Address row exists. Panics on error.
func AddressExistsGP(addressID uint16) bool {
	e, err := AddressExists(boil.GetDB(), addressID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AddressExistsP checks if the Address row exists. Panics on error.
func AddressExistsP(exec boil.Executor, addressID uint16) bool {
	e, err := AddressExists(exec, addressID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
