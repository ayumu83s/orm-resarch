// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testPayments(t *testing.T) {
	t.Parallel()

	query := Payments(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPaymentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = payment.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Payments(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PaymentSlice{payment}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPaymentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PaymentExists(tx, payment.PaymentID)
	if err != nil {
		t.Errorf("Unable to check if Payment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PaymentExistsG to return true, but got false.")
	}
}
func testPaymentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	paymentFound, err := FindPayment(tx, payment.PaymentID)
	if err != nil {
		t.Error(err)
	}

	if paymentFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPaymentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Payments(tx).Bind(payment); err != nil {
		t.Error(err)
	}
}

func testPaymentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Payments(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPaymentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	paymentOne := &Payment{}
	paymentTwo := &Payment{}
	if err = randomize.Struct(seed, paymentOne, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err = randomize.Struct(seed, paymentTwo, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = paymentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = paymentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Payments(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPaymentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	paymentOne := &Payment{}
	paymentTwo := &Payment{}
	if err = randomize.Struct(seed, paymentOne, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err = randomize.Struct(seed, paymentTwo, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = paymentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = paymentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func paymentBeforeInsertHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterInsertHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterSelectHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentBeforeUpdateHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterUpdateHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentBeforeDeleteHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterDeleteHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentBeforeUpsertHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterUpsertHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func testPaymentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Payment{}
	o := &Payment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, paymentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Payment object: %s", err)
	}

	AddPaymentHook(boil.BeforeInsertHook, paymentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	paymentBeforeInsertHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterInsertHook, paymentAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	paymentAfterInsertHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterSelectHook, paymentAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	paymentAfterSelectHooks = []PaymentHook{}

	AddPaymentHook(boil.BeforeUpdateHook, paymentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	paymentBeforeUpdateHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterUpdateHook, paymentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	paymentAfterUpdateHooks = []PaymentHook{}

	AddPaymentHook(boil.BeforeDeleteHook, paymentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	paymentBeforeDeleteHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterDeleteHook, paymentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	paymentAfterDeleteHooks = []PaymentHook{}

	AddPaymentHook(boil.BeforeUpsertHook, paymentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	paymentBeforeUpsertHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterUpsertHook, paymentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	paymentAfterUpsertHooks = []PaymentHook{}
}
func testPaymentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPaymentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx, paymentColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPaymentToOneCustomerUsingCustomer(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Payment
	var foreign Customer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, customerDBTypes, false, customerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Customer struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CustomerID = foreign.CustomerID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Customer(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.CustomerID != foreign.CustomerID {
		t.Errorf("want: %v, got %v", foreign.CustomerID, check.CustomerID)
	}

	slice := PaymentSlice{&local}
	if err = local.L.LoadCustomer(tx, false, (*[]*Payment)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Customer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Customer = nil
	if err = local.L.LoadCustomer(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Customer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPaymentToOneRentalUsingRental(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Payment
	var foreign Rental

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, rentalDBTypes, false, rentalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rental struct: %s", err)
	}

	local.RentalID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.RentalID.Int = foreign.RentalID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Rental(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.RentalID != foreign.RentalID {
		t.Errorf("want: %v, got %v", foreign.RentalID, check.RentalID)
	}

	slice := PaymentSlice{&local}
	if err = local.L.LoadRental(tx, false, (*[]*Payment)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Rental == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Rental = nil
	if err = local.L.LoadRental(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Rental == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPaymentToOneStaffUsingStaff(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Payment
	var foreign Staff

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.StaffID = foreign.StaffID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Staff(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.StaffID != foreign.StaffID {
		t.Errorf("want: %v, got %v", foreign.StaffID, check.StaffID)
	}

	slice := PaymentSlice{&local}
	if err = local.L.LoadStaff(tx, false, (*[]*Payment)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Staff == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Staff = nil
	if err = local.L.LoadStaff(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Staff == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPaymentToOneSetOpCustomerUsingCustomer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Payment
	var b, c Customer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, customerDBTypes, false, strmangle.SetComplement(customerPrimaryKeyColumns, customerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, customerDBTypes, false, strmangle.SetComplement(customerPrimaryKeyColumns, customerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Customer{&b, &c} {
		err = a.SetCustomer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Customer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Payments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CustomerID != x.CustomerID {
			t.Error("foreign key was wrong value", a.CustomerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CustomerID))
		reflect.Indirect(reflect.ValueOf(&a.CustomerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CustomerID != x.CustomerID {
			t.Error("foreign key was wrong value", a.CustomerID, x.CustomerID)
		}
	}
}
func testPaymentToOneSetOpRentalUsingRental(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Payment
	var b, c Rental

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, rentalDBTypes, false, strmangle.SetComplement(rentalPrimaryKeyColumns, rentalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, rentalDBTypes, false, strmangle.SetComplement(rentalPrimaryKeyColumns, rentalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Rental{&b, &c} {
		err = a.SetRental(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Rental != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Payments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RentalID.Int != x.RentalID {
			t.Error("foreign key was wrong value", a.RentalID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RentalID.Int))
		reflect.Indirect(reflect.ValueOf(&a.RentalID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RentalID.Int != x.RentalID {
			t.Error("foreign key was wrong value", a.RentalID.Int, x.RentalID)
		}
	}
}

func testPaymentToOneRemoveOpRentalUsingRental(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Payment
	var b Rental

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, rentalDBTypes, false, strmangle.SetComplement(rentalPrimaryKeyColumns, rentalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRental(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRental(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Rental(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Rental != nil {
		t.Error("R struct entry should be nil")
	}

	if a.RentalID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Payments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPaymentToOneSetOpStaffUsingStaff(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Payment
	var b, c Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Staff{&b, &c} {
		err = a.SetStaff(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Staff != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Payments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StaffID != x.StaffID {
			t.Error("foreign key was wrong value", a.StaffID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StaffID))
		reflect.Indirect(reflect.ValueOf(&a.StaffID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StaffID != x.StaffID {
			t.Error("foreign key was wrong value", a.StaffID, x.StaffID)
		}
	}
}
func testPaymentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = payment.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPaymentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PaymentSlice{payment}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPaymentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Payments(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	paymentDBTypes = map[string]string{`Amount`: `decimal`, `CustomerID`: `smallint`, `LastUpdate`: `timestamp`, `PaymentDate`: `datetime`, `PaymentID`: `smallint`, `RentalID`: `int`, `StaffID`: `tinyint`}
	_              = bytes.MinRead
)

func testPaymentsUpdate(t *testing.T) {
	t.Parallel()

	if len(paymentColumns) == len(paymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	if err = payment.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPaymentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(paymentColumns) == len(paymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(paymentColumns, paymentPrimaryKeyColumns) {
		fields = paymentColumns
	} else {
		fields = strmangle.SetComplement(
			paymentColumns,
			paymentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(payment))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PaymentSlice{payment}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPaymentsUpsert(t *testing.T) {
	t.Parallel()

	if len(paymentColumns) == len(paymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	payment := Payment{}
	if err = randomize.Struct(seed, &payment, paymentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Payment: %s", err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &payment, paymentDBTypes, false, paymentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	if err = payment.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Payment: %s", err)
	}

	count, err = Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
