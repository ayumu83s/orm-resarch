// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// FilmCategory is an object representing the database table.
type FilmCategory struct {
	FilmID     uint16    `boil:"film_id" json:"film_id" toml:"film_id" yaml:"film_id"`
	CategoryID uint8     `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	LastUpdate time.Time `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *filmCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L filmCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FilmCategoryColumns = struct {
	FilmID     string
	CategoryID string
	LastUpdate string
}{
	FilmID:     "film_id",
	CategoryID: "category_id",
	LastUpdate: "last_update",
}

// filmCategoryR is where relationships are stored.
type filmCategoryR struct {
	Category *Category
	Film     *Film
}

// filmCategoryL is where Load methods for each relationship are stored.
type filmCategoryL struct{}

var (
	filmCategoryColumns               = []string{"film_id", "category_id", "last_update"}
	filmCategoryColumnsWithoutDefault = []string{"film_id", "category_id"}
	filmCategoryColumnsWithDefault    = []string{"last_update"}
	filmCategoryPrimaryKeyColumns     = []string{"film_id", "category_id"}
)

type (
	// FilmCategorySlice is an alias for a slice of pointers to FilmCategory.
	// This should generally be used opposed to []FilmCategory.
	FilmCategorySlice []*FilmCategory
	// FilmCategoryHook is the signature for custom FilmCategory hook methods
	FilmCategoryHook func(boil.Executor, *FilmCategory) error

	filmCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	filmCategoryType                 = reflect.TypeOf(&FilmCategory{})
	filmCategoryMapping              = queries.MakeStructMapping(filmCategoryType)
	filmCategoryPrimaryKeyMapping, _ = queries.BindMapping(filmCategoryType, filmCategoryMapping, filmCategoryPrimaryKeyColumns)
	filmCategoryInsertCacheMut       sync.RWMutex
	filmCategoryInsertCache          = make(map[string]insertCache)
	filmCategoryUpdateCacheMut       sync.RWMutex
	filmCategoryUpdateCache          = make(map[string]updateCache)
	filmCategoryUpsertCacheMut       sync.RWMutex
	filmCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var filmCategoryBeforeInsertHooks []FilmCategoryHook
var filmCategoryBeforeUpdateHooks []FilmCategoryHook
var filmCategoryBeforeDeleteHooks []FilmCategoryHook
var filmCategoryBeforeUpsertHooks []FilmCategoryHook

var filmCategoryAfterInsertHooks []FilmCategoryHook
var filmCategoryAfterSelectHooks []FilmCategoryHook
var filmCategoryAfterUpdateHooks []FilmCategoryHook
var filmCategoryAfterDeleteHooks []FilmCategoryHook
var filmCategoryAfterUpsertHooks []FilmCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FilmCategory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filmCategoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FilmCategory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range filmCategoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FilmCategory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range filmCategoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FilmCategory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filmCategoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FilmCategory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filmCategoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FilmCategory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range filmCategoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FilmCategory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range filmCategoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FilmCategory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range filmCategoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FilmCategory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range filmCategoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFilmCategoryHook registers your hook function for all future operations.
func AddFilmCategoryHook(hookPoint boil.HookPoint, filmCategoryHook FilmCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		filmCategoryBeforeInsertHooks = append(filmCategoryBeforeInsertHooks, filmCategoryHook)
	case boil.BeforeUpdateHook:
		filmCategoryBeforeUpdateHooks = append(filmCategoryBeforeUpdateHooks, filmCategoryHook)
	case boil.BeforeDeleteHook:
		filmCategoryBeforeDeleteHooks = append(filmCategoryBeforeDeleteHooks, filmCategoryHook)
	case boil.BeforeUpsertHook:
		filmCategoryBeforeUpsertHooks = append(filmCategoryBeforeUpsertHooks, filmCategoryHook)
	case boil.AfterInsertHook:
		filmCategoryAfterInsertHooks = append(filmCategoryAfterInsertHooks, filmCategoryHook)
	case boil.AfterSelectHook:
		filmCategoryAfterSelectHooks = append(filmCategoryAfterSelectHooks, filmCategoryHook)
	case boil.AfterUpdateHook:
		filmCategoryAfterUpdateHooks = append(filmCategoryAfterUpdateHooks, filmCategoryHook)
	case boil.AfterDeleteHook:
		filmCategoryAfterDeleteHooks = append(filmCategoryAfterDeleteHooks, filmCategoryHook)
	case boil.AfterUpsertHook:
		filmCategoryAfterUpsertHooks = append(filmCategoryAfterUpsertHooks, filmCategoryHook)
	}
}

// OneP returns a single filmCategory record from the query, and panics on error.
func (q filmCategoryQuery) OneP() *FilmCategory {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single filmCategory record from the query.
func (q filmCategoryQuery) One() (*FilmCategory, error) {
	o := &FilmCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for film_category")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all FilmCategory records from the query, and panics on error.
func (q filmCategoryQuery) AllP() FilmCategorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all FilmCategory records from the query.
func (q filmCategoryQuery) All() (FilmCategorySlice, error) {
	var o []*FilmCategory

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to FilmCategory slice")
	}

	if len(filmCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all FilmCategory records in the query, and panics on error.
func (q filmCategoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all FilmCategory records in the query.
func (q filmCategoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count film_category rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q filmCategoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q filmCategoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if film_category exists")
	}

	return count > 0, nil
}

// CategoryG pointed to by the foreign key.
func (o *FilmCategory) CategoryG(mods ...qm.QueryMod) categoryQuery {
	return o.Category(boil.GetDB(), mods...)
}

// Category pointed to by the foreign key.
func (o *FilmCategory) Category(exec boil.Executor, mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("category_id=?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := Categories(exec, queryMods...)
	queries.SetFrom(query.Query, "`category`")

	return query
}

// FilmG pointed to by the foreign key.
func (o *FilmCategory) FilmG(mods ...qm.QueryMod) filmQuery {
	return o.Film(boil.GetDB(), mods...)
}

// Film pointed to by the foreign key.
func (o *FilmCategory) Film(exec boil.Executor, mods ...qm.QueryMod) filmQuery {
	queryMods := []qm.QueryMod{
		qm.Where("film_id=?", o.FilmID),
	}

	queryMods = append(queryMods, mods...)

	query := Films(exec, queryMods...)
	queries.SetFrom(query.Query, "`film`")

	return query
} // LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (filmCategoryL) LoadCategory(e boil.Executor, singular bool, maybeFilmCategory interface{}) error {
	var slice []*FilmCategory
	var object *FilmCategory

	count := 1
	if singular {
		object = maybeFilmCategory.(*FilmCategory)
	} else {
		slice = *maybeFilmCategory.(*[]*FilmCategory)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &filmCategoryR{}
		}
		args[0] = object.CategoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &filmCategoryR{}
			}
			args[i] = obj.CategoryID
		}
	}

	query := fmt.Sprintf(
		"select * from `category` where `category_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}
	defer results.Close()

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if len(filmCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Category = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.CategoryID {
				local.R.Category = foreign
				break
			}
		}
	}

	return nil
}

// LoadFilm allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (filmCategoryL) LoadFilm(e boil.Executor, singular bool, maybeFilmCategory interface{}) error {
	var slice []*FilmCategory
	var object *FilmCategory

	count := 1
	if singular {
		object = maybeFilmCategory.(*FilmCategory)
	} else {
		slice = *maybeFilmCategory.(*[]*FilmCategory)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &filmCategoryR{}
		}
		args[0] = object.FilmID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &filmCategoryR{}
			}
			args[i] = obj.FilmID
		}
	}

	query := fmt.Sprintf(
		"select * from `film` where `film_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Film")
	}
	defer results.Close()

	var resultSlice []*Film
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Film")
	}

	if len(filmCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Film = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FilmID == foreign.FilmID {
				local.R.Film = foreign
				break
			}
		}
	}

	return nil
}

// SetCategoryG of the film_category to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.FilmCategories.
// Uses the global database handle.
func (o *FilmCategory) SetCategoryG(insert bool, related *Category) error {
	return o.SetCategory(boil.GetDB(), insert, related)
}

// SetCategoryP of the film_category to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.FilmCategories.
// Panics on error.
func (o *FilmCategory) SetCategoryP(exec boil.Executor, insert bool, related *Category) {
	if err := o.SetCategory(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategoryGP of the film_category to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.FilmCategories.
// Uses the global database handle and panics on error.
func (o *FilmCategory) SetCategoryGP(insert bool, related *Category) {
	if err := o.SetCategory(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategory of the film_category to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.FilmCategories.
func (o *FilmCategory) SetCategory(exec boil.Executor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `film_category` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
		strmangle.WhereClause("`", "`", 0, filmCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.CategoryID, o.FilmID, o.CategoryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.CategoryID

	if o.R == nil {
		o.R = &filmCategoryR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			FilmCategories: FilmCategorySlice{o},
		}
	} else {
		related.R.FilmCategories = append(related.R.FilmCategories, o)
	}

	return nil
}

// SetFilmG of the film_category to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.FilmCategories.
// Uses the global database handle.
func (o *FilmCategory) SetFilmG(insert bool, related *Film) error {
	return o.SetFilm(boil.GetDB(), insert, related)
}

// SetFilmP of the film_category to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.FilmCategories.
// Panics on error.
func (o *FilmCategory) SetFilmP(exec boil.Executor, insert bool, related *Film) {
	if err := o.SetFilm(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFilmGP of the film_category to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.FilmCategories.
// Uses the global database handle and panics on error.
func (o *FilmCategory) SetFilmGP(insert bool, related *Film) {
	if err := o.SetFilm(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFilm of the film_category to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.FilmCategories.
func (o *FilmCategory) SetFilm(exec boil.Executor, insert bool, related *Film) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `film_category` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"film_id"}),
		strmangle.WhereClause("`", "`", 0, filmCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.FilmID, o.FilmID, o.CategoryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FilmID = related.FilmID

	if o.R == nil {
		o.R = &filmCategoryR{
			Film: related,
		}
	} else {
		o.R.Film = related
	}

	if related.R == nil {
		related.R = &filmR{
			FilmCategories: FilmCategorySlice{o},
		}
	} else {
		related.R.FilmCategories = append(related.R.FilmCategories, o)
	}

	return nil
}

// FilmCategoriesG retrieves all records.
func FilmCategoriesG(mods ...qm.QueryMod) filmCategoryQuery {
	return FilmCategories(boil.GetDB(), mods...)
}

// FilmCategories retrieves all the records using an executor.
func FilmCategories(exec boil.Executor, mods ...qm.QueryMod) filmCategoryQuery {
	mods = append(mods, qm.From("`film_category`"))
	return filmCategoryQuery{NewQuery(exec, mods...)}
}

// FindFilmCategoryG retrieves a single record by ID.
func FindFilmCategoryG(filmID uint16, categoryID uint8, selectCols ...string) (*FilmCategory, error) {
	return FindFilmCategory(boil.GetDB(), filmID, categoryID, selectCols...)
}

// FindFilmCategoryGP retrieves a single record by ID, and panics on error.
func FindFilmCategoryGP(filmID uint16, categoryID uint8, selectCols ...string) *FilmCategory {
	retobj, err := FindFilmCategory(boil.GetDB(), filmID, categoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindFilmCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFilmCategory(exec boil.Executor, filmID uint16, categoryID uint8, selectCols ...string) (*FilmCategory, error) {
	filmCategoryObj := &FilmCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `film_category` where `film_id`=? AND `category_id`=?", sel,
	)

	q := queries.Raw(exec, query, filmID, categoryID)

	err := q.Bind(filmCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from film_category")
	}

	return filmCategoryObj, nil
}

// FindFilmCategoryP retrieves a single record by ID with an executor, and panics on error.
func FindFilmCategoryP(exec boil.Executor, filmID uint16, categoryID uint8, selectCols ...string) *FilmCategory {
	retobj, err := FindFilmCategory(exec, filmID, categoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *FilmCategory) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *FilmCategory) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *FilmCategory) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *FilmCategory) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no film_category provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmCategoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	filmCategoryInsertCacheMut.RLock()
	cache, cached := filmCategoryInsertCache[key]
	filmCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			filmCategoryColumns,
			filmCategoryColumnsWithDefault,
			filmCategoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(filmCategoryType, filmCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(filmCategoryType, filmCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `film_category` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `film_category` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `film_category` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, filmCategoryPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into film_category")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FilmID,
		o.CategoryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for film_category")
	}

CacheNoHooks:
	if !cached {
		filmCategoryInsertCacheMut.Lock()
		filmCategoryInsertCache[key] = cache
		filmCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single FilmCategory record. See Update for
// whitelist behavior description.
func (o *FilmCategory) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single FilmCategory record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *FilmCategory) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the FilmCategory, and panics on error.
// See Update for whitelist behavior description.
func (o *FilmCategory) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the FilmCategory.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *FilmCategory) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	filmCategoryUpdateCacheMut.RLock()
	cache, cached := filmCategoryUpdateCache[key]
	filmCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			filmCategoryColumns,
			filmCategoryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("sqlboiler: unable to update film_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `film_category` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, filmCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(filmCategoryType, filmCategoryMapping, append(wl, filmCategoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update film_category row")
	}

	if !cached {
		filmCategoryUpdateCacheMut.Lock()
		filmCategoryUpdateCache[key] = cache
		filmCategoryUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q filmCategoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q filmCategoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all for film_category")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FilmCategorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o FilmCategorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o FilmCategorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FilmCategorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `film_category` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmCategoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all in filmCategory slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *FilmCategory) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *FilmCategory) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *FilmCategory) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *FilmCategory) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no film_category provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	filmCategoryUpsertCacheMut.RLock()
	cache, cached := filmCategoryUpsertCache[key]
	filmCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			filmCategoryColumns,
			filmCategoryColumnsWithDefault,
			filmCategoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			filmCategoryColumns,
			filmCategoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert film_category, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "film_category", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `film_category` WHERE `film_id`=? AND `category_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(filmCategoryType, filmCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(filmCategoryType, filmCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for film_category")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FilmID,
		o.CategoryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for film_category")
	}

CacheNoHooks:
	if !cached {
		filmCategoryUpsertCacheMut.Lock()
		filmCategoryUpsertCache[key] = cache
		filmCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single FilmCategory record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *FilmCategory) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single FilmCategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *FilmCategory) DeleteG() error {
	if o == nil {
		return errors.New("sqlboiler: no FilmCategory provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single FilmCategory record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *FilmCategory) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single FilmCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FilmCategory) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no FilmCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), filmCategoryPrimaryKeyMapping)
	sql := "DELETE FROM `film_category` WHERE `film_id`=? AND `category_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete from film_category")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q filmCategoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q filmCategoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("sqlboiler: no filmCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from film_category")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o FilmCategorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o FilmCategorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("sqlboiler: no FilmCategory slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o FilmCategorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FilmCategorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no FilmCategory slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(filmCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `film_category` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmCategoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from filmCategory slice")
	}

	if len(filmCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *FilmCategory) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *FilmCategory) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *FilmCategory) ReloadG() error {
	if o == nil {
		return errors.New("sqlboiler: no FilmCategory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FilmCategory) Reload(exec boil.Executor) error {
	ret, err := FindFilmCategory(exec, o.FilmID, o.CategoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *FilmCategorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *FilmCategorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilmCategorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("sqlboiler: empty FilmCategorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilmCategorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	filmCategories := FilmCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `film_category`.* FROM `film_category` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&filmCategories)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in FilmCategorySlice")
	}

	*o = filmCategories

	return nil
}

// FilmCategoryExists checks if the FilmCategory row exists.
func FilmCategoryExists(exec boil.Executor, filmID uint16, categoryID uint8) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `film_category` where `film_id`=? AND `category_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, filmID, categoryID)
	}

	row := exec.QueryRow(sql, filmID, categoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if film_category exists")
	}

	return exists, nil
}

// FilmCategoryExistsG checks if the FilmCategory row exists.
func FilmCategoryExistsG(filmID uint16, categoryID uint8) (bool, error) {
	return FilmCategoryExists(boil.GetDB(), filmID, categoryID)
}

// FilmCategoryExistsGP checks if the FilmCategory row exists. Panics on error.
func FilmCategoryExistsGP(filmID uint16, categoryID uint8) bool {
	e, err := FilmCategoryExists(boil.GetDB(), filmID, categoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// FilmCategoryExistsP checks if the FilmCategory row exists. Panics on error.
func FilmCategoryExistsP(exec boil.Executor, filmID uint16, categoryID uint8) bool {
	e, err := FilmCategoryExists(exec, filmID, categoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
