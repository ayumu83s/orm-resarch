// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Customer is an object representing the database table.
type Customer struct {
	CustomerID uint16      `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	StoreID    uint8       `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	FirstName  string      `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName   string      `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	Email      null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	AddressID  uint16      `boil:"address_id" json:"address_id" toml:"address_id" yaml:"address_id"`
	Active     int8        `boil:"active" json:"active" toml:"active" yaml:"active"`
	CreateDate time.Time   `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	LastUpdate time.Time   `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *customerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomerColumns = struct {
	CustomerID string
	StoreID    string
	FirstName  string
	LastName   string
	Email      string
	AddressID  string
	Active     string
	CreateDate string
	LastUpdate string
}{
	CustomerID: "customer_id",
	StoreID:    "store_id",
	FirstName:  "first_name",
	LastName:   "last_name",
	Email:      "email",
	AddressID:  "address_id",
	Active:     "active",
	CreateDate: "create_date",
	LastUpdate: "last_update",
}

// customerR is where relationships are stored.
type customerR struct {
	Address  *Address
	Store    *Store
	Payments PaymentSlice
	Rentals  RentalSlice
}

// customerL is where Load methods for each relationship are stored.
type customerL struct{}

var (
	customerColumns               = []string{"customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"}
	customerColumnsWithoutDefault = []string{"store_id", "first_name", "last_name", "email", "address_id", "create_date"}
	customerColumnsWithDefault    = []string{"customer_id", "active", "last_update"}
	customerPrimaryKeyColumns     = []string{"customer_id"}
)

type (
	// CustomerSlice is an alias for a slice of pointers to Customer.
	// This should generally be used opposed to []Customer.
	CustomerSlice []*Customer
	// CustomerHook is the signature for custom Customer hook methods
	CustomerHook func(boil.Executor, *Customer) error

	customerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerType                 = reflect.TypeOf(&Customer{})
	customerMapping              = queries.MakeStructMapping(customerType)
	customerPrimaryKeyMapping, _ = queries.BindMapping(customerType, customerMapping, customerPrimaryKeyColumns)
	customerInsertCacheMut       sync.RWMutex
	customerInsertCache          = make(map[string]insertCache)
	customerUpdateCacheMut       sync.RWMutex
	customerUpdateCache          = make(map[string]updateCache)
	customerUpsertCacheMut       sync.RWMutex
	customerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var customerBeforeInsertHooks []CustomerHook
var customerBeforeUpdateHooks []CustomerHook
var customerBeforeDeleteHooks []CustomerHook
var customerBeforeUpsertHooks []CustomerHook

var customerAfterInsertHooks []CustomerHook
var customerAfterSelectHooks []CustomerHook
var customerAfterUpdateHooks []CustomerHook
var customerAfterDeleteHooks []CustomerHook
var customerAfterUpsertHooks []CustomerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Customer) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range customerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Customer) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range customerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Customer) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range customerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Customer) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range customerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Customer) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range customerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Customer) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range customerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Customer) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range customerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Customer) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range customerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Customer) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range customerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCustomerHook registers your hook function for all future operations.
func AddCustomerHook(hookPoint boil.HookPoint, customerHook CustomerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		customerBeforeInsertHooks = append(customerBeforeInsertHooks, customerHook)
	case boil.BeforeUpdateHook:
		customerBeforeUpdateHooks = append(customerBeforeUpdateHooks, customerHook)
	case boil.BeforeDeleteHook:
		customerBeforeDeleteHooks = append(customerBeforeDeleteHooks, customerHook)
	case boil.BeforeUpsertHook:
		customerBeforeUpsertHooks = append(customerBeforeUpsertHooks, customerHook)
	case boil.AfterInsertHook:
		customerAfterInsertHooks = append(customerAfterInsertHooks, customerHook)
	case boil.AfterSelectHook:
		customerAfterSelectHooks = append(customerAfterSelectHooks, customerHook)
	case boil.AfterUpdateHook:
		customerAfterUpdateHooks = append(customerAfterUpdateHooks, customerHook)
	case boil.AfterDeleteHook:
		customerAfterDeleteHooks = append(customerAfterDeleteHooks, customerHook)
	case boil.AfterUpsertHook:
		customerAfterUpsertHooks = append(customerAfterUpsertHooks, customerHook)
	}
}

// OneP returns a single customer record from the query, and panics on error.
func (q customerQuery) OneP() *Customer {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single customer record from the query.
func (q customerQuery) One() (*Customer, error) {
	o := &Customer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for customer")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Customer records from the query, and panics on error.
func (q customerQuery) AllP() CustomerSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Customer records from the query.
func (q customerQuery) All() (CustomerSlice, error) {
	var o []*Customer

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Customer slice")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Customer records in the query, and panics on error.
func (q customerQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Customer records in the query.
func (q customerQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count customer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q customerQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q customerQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if customer exists")
	}

	return count > 0, nil
}

// AddressG pointed to by the foreign key.
func (o *Customer) AddressG(mods ...qm.QueryMod) addressQuery {
	return o.Address(boil.GetDB(), mods...)
}

// Address pointed to by the foreign key.
func (o *Customer) Address(exec boil.Executor, mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("address_id=?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	query := Addresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`address`")

	return query
}

// StoreG pointed to by the foreign key.
func (o *Customer) StoreG(mods ...qm.QueryMod) storeQuery {
	return o.Store(boil.GetDB(), mods...)
}

// Store pointed to by the foreign key.
func (o *Customer) Store(exec boil.Executor, mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("store_id=?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	query := Stores(exec, queryMods...)
	queries.SetFrom(query.Query, "`store`")

	return query
}

// PaymentsG retrieves all the payment's payment.
func (o *Customer) PaymentsG(mods ...qm.QueryMod) paymentQuery {
	return o.Payments(boil.GetDB(), mods...)
}

// Payments retrieves all the payment's payment with an executor.
func (o *Customer) Payments(exec boil.Executor, mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`payment`.`customer_id`=?", o.CustomerID),
	)

	query := Payments(exec, queryMods...)
	queries.SetFrom(query.Query, "`payment`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`payment`.*"})
	}

	return query
}

// RentalsG retrieves all the rental's rental.
func (o *Customer) RentalsG(mods ...qm.QueryMod) rentalQuery {
	return o.Rentals(boil.GetDB(), mods...)
}

// Rentals retrieves all the rental's rental with an executor.
func (o *Customer) Rentals(exec boil.Executor, mods ...qm.QueryMod) rentalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`rental`.`customer_id`=?", o.CustomerID),
	)

	query := Rentals(exec, queryMods...)
	queries.SetFrom(query.Query, "`rental`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`rental`.*"})
	}

	return query
}

// LoadAddress allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (customerL) LoadAddress(e boil.Executor, singular bool, maybeCustomer interface{}) error {
	var slice []*Customer
	var object *Customer

	count := 1
	if singular {
		object = maybeCustomer.(*Customer)
	} else {
		slice = *maybeCustomer.(*[]*Customer)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &customerR{}
		}
		args[0] = object.AddressID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &customerR{}
			}
			args[i] = obj.AddressID
		}
	}

	query := fmt.Sprintf(
		"select * from `address` where `address_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}
	defer results.Close()

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Address = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AddressID == foreign.AddressID {
				local.R.Address = foreign
				break
			}
		}
	}

	return nil
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (customerL) LoadStore(e boil.Executor, singular bool, maybeCustomer interface{}) error {
	var slice []*Customer
	var object *Customer

	count := 1
	if singular {
		object = maybeCustomer.(*Customer)
	} else {
		slice = *maybeCustomer.(*[]*Customer)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &customerR{}
		}
		args[0] = object.StoreID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &customerR{}
			}
			args[i] = obj.StoreID
		}
	}

	query := fmt.Sprintf(
		"select * from `store` where `store_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}
	defer results.Close()

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Store = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StoreID == foreign.StoreID {
				local.R.Store = foreign
				break
			}
		}
	}

	return nil
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (customerL) LoadPayments(e boil.Executor, singular bool, maybeCustomer interface{}) error {
	var slice []*Customer
	var object *Customer

	count := 1
	if singular {
		object = maybeCustomer.(*Customer)
	} else {
		slice = *maybeCustomer.(*[]*Customer)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &customerR{}
		}
		args[0] = object.CustomerID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &customerR{}
			}
			args[i] = obj.CustomerID
		}
	}

	query := fmt.Sprintf(
		"select * from `payment` where `customer_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment")
	}
	defer results.Close()

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Payments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CustomerID == foreign.CustomerID {
				local.R.Payments = append(local.R.Payments, foreign)
				break
			}
		}
	}

	return nil
}

// LoadRentals allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (customerL) LoadRentals(e boil.Executor, singular bool, maybeCustomer interface{}) error {
	var slice []*Customer
	var object *Customer

	count := 1
	if singular {
		object = maybeCustomer.(*Customer)
	} else {
		slice = *maybeCustomer.(*[]*Customer)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &customerR{}
		}
		args[0] = object.CustomerID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &customerR{}
			}
			args[i] = obj.CustomerID
		}
	}

	query := fmt.Sprintf(
		"select * from `rental` where `customer_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rental")
	}
	defer results.Close()

	var resultSlice []*Rental
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rental")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Rentals = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CustomerID == foreign.CustomerID {
				local.R.Rentals = append(local.R.Rentals, foreign)
				break
			}
		}
	}

	return nil
}

// SetAddressG of the customer to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Customers.
// Uses the global database handle.
func (o *Customer) SetAddressG(insert bool, related *Address) error {
	return o.SetAddress(boil.GetDB(), insert, related)
}

// SetAddressP of the customer to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Customers.
// Panics on error.
func (o *Customer) SetAddressP(exec boil.Executor, insert bool, related *Address) {
	if err := o.SetAddress(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddressGP of the customer to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Customers.
// Uses the global database handle and panics on error.
func (o *Customer) SetAddressGP(insert bool, related *Address) {
	if err := o.SetAddress(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddress of the customer to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Customers.
func (o *Customer) SetAddress(exec boil.Executor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `customer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
		strmangle.WhereClause("`", "`", 0, customerPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.CustomerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AddressID = related.AddressID

	if o.R == nil {
		o.R = &customerR{
			Address: related,
		}
	} else {
		o.R.Address = related
	}

	if related.R == nil {
		related.R = &addressR{
			Customers: CustomerSlice{o},
		}
	} else {
		related.R.Customers = append(related.R.Customers, o)
	}

	return nil
}

// SetStoreG of the customer to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Customers.
// Uses the global database handle.
func (o *Customer) SetStoreG(insert bool, related *Store) error {
	return o.SetStore(boil.GetDB(), insert, related)
}

// SetStoreP of the customer to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Customers.
// Panics on error.
func (o *Customer) SetStoreP(exec boil.Executor, insert bool, related *Store) {
	if err := o.SetStore(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStoreGP of the customer to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Customers.
// Uses the global database handle and panics on error.
func (o *Customer) SetStoreGP(insert bool, related *Store) {
	if err := o.SetStore(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStore of the customer to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Customers.
func (o *Customer) SetStore(exec boil.Executor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `customer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
		strmangle.WhereClause("`", "`", 0, customerPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.CustomerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StoreID = related.StoreID

	if o.R == nil {
		o.R = &customerR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			Customers: CustomerSlice{o},
		}
	} else {
		related.R.Customers = append(related.R.Customers, o)
	}

	return nil
}

// AddPaymentsG adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Customer appropriately.
// Uses the global database handle.
func (o *Customer) AddPaymentsG(insert bool, related ...*Payment) error {
	return o.AddPayments(boil.GetDB(), insert, related...)
}

// AddPaymentsP adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Customer appropriately.
// Panics on error.
func (o *Customer) AddPaymentsP(exec boil.Executor, insert bool, related ...*Payment) {
	if err := o.AddPayments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPaymentsGP adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Customer appropriately.
// Uses the global database handle and panics on error.
func (o *Customer) AddPaymentsGP(insert bool, related ...*Payment) {
	if err := o.AddPayments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPayments adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Customer appropriately.
func (o *Customer) AddPayments(exec boil.Executor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CustomerID = o.CustomerID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `payment` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"customer_id"}),
				strmangle.WhereClause("`", "`", 0, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.CustomerID, rel.PaymentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CustomerID = o.CustomerID
		}
	}

	if o.R == nil {
		o.R = &customerR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Customer: o,
			}
		} else {
			rel.R.Customer = o
		}
	}
	return nil
}

// AddRentalsG adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Customer appropriately.
// Uses the global database handle.
func (o *Customer) AddRentalsG(insert bool, related ...*Rental) error {
	return o.AddRentals(boil.GetDB(), insert, related...)
}

// AddRentalsP adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Customer appropriately.
// Panics on error.
func (o *Customer) AddRentalsP(exec boil.Executor, insert bool, related ...*Rental) {
	if err := o.AddRentals(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRentalsGP adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Customer appropriately.
// Uses the global database handle and panics on error.
func (o *Customer) AddRentalsGP(insert bool, related ...*Rental) {
	if err := o.AddRentals(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRentals adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Customer appropriately.
func (o *Customer) AddRentals(exec boil.Executor, insert bool, related ...*Rental) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CustomerID = o.CustomerID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `rental` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"customer_id"}),
				strmangle.WhereClause("`", "`", 0, rentalPrimaryKeyColumns),
			)
			values := []interface{}{o.CustomerID, rel.RentalID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CustomerID = o.CustomerID
		}
	}

	if o.R == nil {
		o.R = &customerR{
			Rentals: related,
		}
	} else {
		o.R.Rentals = append(o.R.Rentals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rentalR{
				Customer: o,
			}
		} else {
			rel.R.Customer = o
		}
	}
	return nil
}

// CustomersG retrieves all records.
func CustomersG(mods ...qm.QueryMod) customerQuery {
	return Customers(boil.GetDB(), mods...)
}

// Customers retrieves all the records using an executor.
func Customers(exec boil.Executor, mods ...qm.QueryMod) customerQuery {
	mods = append(mods, qm.From("`customer`"))
	return customerQuery{NewQuery(exec, mods...)}
}

// FindCustomerG retrieves a single record by ID.
func FindCustomerG(customerID uint16, selectCols ...string) (*Customer, error) {
	return FindCustomer(boil.GetDB(), customerID, selectCols...)
}

// FindCustomerGP retrieves a single record by ID, and panics on error.
func FindCustomerGP(customerID uint16, selectCols ...string) *Customer {
	retobj, err := FindCustomer(boil.GetDB(), customerID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCustomer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomer(exec boil.Executor, customerID uint16, selectCols ...string) (*Customer, error) {
	customerObj := &Customer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `customer` where `customer_id`=?", sel,
	)

	q := queries.Raw(exec, query, customerID)

	err := q.Bind(customerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from customer")
	}

	return customerObj, nil
}

// FindCustomerP retrieves a single record by ID with an executor, and panics on error.
func FindCustomerP(exec boil.Executor, customerID uint16, selectCols ...string) *Customer {
	retobj, err := FindCustomer(exec, customerID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Customer) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Customer) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Customer) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Customer) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no customer provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	customerInsertCacheMut.RLock()
	cache, cached := customerInsertCache[key]
	customerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			customerColumns,
			customerColumnsWithDefault,
			customerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(customerType, customerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customerType, customerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `customer` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `customer` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `customer` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, customerPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into customer")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CustomerID = uint16(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == customerMapping["CustomerID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CustomerID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for customer")
	}

CacheNoHooks:
	if !cached {
		customerInsertCacheMut.Lock()
		customerInsertCache[key] = cache
		customerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Customer record. See Update for
// whitelist behavior description.
func (o *Customer) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Customer record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Customer) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Customer, and panics on error.
// See Update for whitelist behavior description.
func (o *Customer) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Customer.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Customer) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	customerUpdateCacheMut.RLock()
	cache, cached := customerUpdateCache[key]
	customerUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			customerColumns,
			customerPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("sqlboiler: unable to update customer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `customer` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, customerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customerType, customerMapping, append(wl, customerPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update customer row")
	}

	if !cached {
		customerUpdateCacheMut.Lock()
		customerUpdateCache[key] = cache
		customerUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q customerQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q customerQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all for customer")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CustomerSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CustomerSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CustomerSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomerSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `customer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all in customer slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Customer) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Customer) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Customer) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Customer) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no customer provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customerUpsertCacheMut.RLock()
	cache, cached := customerUpsertCache[key]
	customerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			customerColumns,
			customerColumnsWithDefault,
			customerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			customerColumns,
			customerPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert customer, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "customer", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `customer` WHERE `customer_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(customerType, customerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customerType, customerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for customer")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CustomerID = uint16(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == customerMapping["CustomerID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CustomerID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for customer")
	}

CacheNoHooks:
	if !cached {
		customerUpsertCacheMut.Lock()
		customerUpsertCache[key] = cache
		customerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Customer record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Customer) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Customer record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Customer) DeleteG() error {
	if o == nil {
		return errors.New("sqlboiler: no Customer provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Customer record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Customer) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Customer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Customer) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Customer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customerPrimaryKeyMapping)
	sql := "DELETE FROM `customer` WHERE `customer_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete from customer")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q customerQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q customerQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("sqlboiler: no customerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from customer")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CustomerSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o CustomerSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("sqlboiler: no Customer slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CustomerSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomerSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Customer slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(customerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `customer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from customer slice")
	}

	if len(customerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Customer) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Customer) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Customer) ReloadG() error {
	if o == nil {
		return errors.New("sqlboiler: no Customer provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Customer) Reload(exec boil.Executor) error {
	ret, err := FindCustomer(exec, o.CustomerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CustomerSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CustomerSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("sqlboiler: empty CustomerSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	customers := CustomerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `customer`.* FROM `customer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&customers)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in CustomerSlice")
	}

	*o = customers

	return nil
}

// CustomerExists checks if the Customer row exists.
func CustomerExists(exec boil.Executor, customerID uint16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `customer` where `customer_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, customerID)
	}

	row := exec.QueryRow(sql, customerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if customer exists")
	}

	return exists, nil
}

// CustomerExistsG checks if the Customer row exists.
func CustomerExistsG(customerID uint16) (bool, error) {
	return CustomerExists(boil.GetDB(), customerID)
}

// CustomerExistsGP checks if the Customer row exists. Panics on error.
func CustomerExistsGP(customerID uint16) bool {
	e, err := CustomerExists(boil.GetDB(), customerID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CustomerExistsP checks if the Customer row exists. Panics on error.
func CustomerExistsP(exec boil.Executor, customerID uint16) bool {
	e, err := CustomerExists(exec, customerID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
