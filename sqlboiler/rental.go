// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package sqlboiler

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Rental is an object representing the database table.
type Rental struct {
	RentalID    int       `boil:"rental_id" json:"rental_id" toml:"rental_id" yaml:"rental_id"`
	RentalDate  time.Time `boil:"rental_date" json:"rental_date" toml:"rental_date" yaml:"rental_date"`
	InventoryID uint32    `boil:"inventory_id" json:"inventory_id" toml:"inventory_id" yaml:"inventory_id"`
	CustomerID  uint16    `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	ReturnDate  null.Time `boil:"return_date" json:"return_date,omitempty" toml:"return_date" yaml:"return_date,omitempty"`
	StaffID     uint8     `boil:"staff_id" json:"staff_id" toml:"staff_id" yaml:"staff_id"`
	LastUpdate  time.Time `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *rentalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rentalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RentalColumns = struct {
	RentalID    string
	RentalDate  string
	InventoryID string
	CustomerID  string
	ReturnDate  string
	StaffID     string
	LastUpdate  string
}{
	RentalID:    "rental_id",
	RentalDate:  "rental_date",
	InventoryID: "inventory_id",
	CustomerID:  "customer_id",
	ReturnDate:  "return_date",
	StaffID:     "staff_id",
	LastUpdate:  "last_update",
}

// rentalR is where relationships are stored.
type rentalR struct {
	Customer  *Customer
	Inventory *Inventory
	Staff     *Staff
	Payments  PaymentSlice
}

// rentalL is where Load methods for each relationship are stored.
type rentalL struct{}

var (
	rentalColumns               = []string{"rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"}
	rentalColumnsWithoutDefault = []string{"rental_date", "inventory_id", "customer_id", "return_date", "staff_id"}
	rentalColumnsWithDefault    = []string{"rental_id", "last_update"}
	rentalPrimaryKeyColumns     = []string{"rental_id"}
)

type (
	// RentalSlice is an alias for a slice of pointers to Rental.
	// This should generally be used opposed to []Rental.
	RentalSlice []*Rental
	// RentalHook is the signature for custom Rental hook methods
	RentalHook func(boil.Executor, *Rental) error

	rentalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rentalType                 = reflect.TypeOf(&Rental{})
	rentalMapping              = queries.MakeStructMapping(rentalType)
	rentalPrimaryKeyMapping, _ = queries.BindMapping(rentalType, rentalMapping, rentalPrimaryKeyColumns)
	rentalInsertCacheMut       sync.RWMutex
	rentalInsertCache          = make(map[string]insertCache)
	rentalUpdateCacheMut       sync.RWMutex
	rentalUpdateCache          = make(map[string]updateCache)
	rentalUpsertCacheMut       sync.RWMutex
	rentalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var rentalBeforeInsertHooks []RentalHook
var rentalBeforeUpdateHooks []RentalHook
var rentalBeforeDeleteHooks []RentalHook
var rentalBeforeUpsertHooks []RentalHook

var rentalAfterInsertHooks []RentalHook
var rentalAfterSelectHooks []RentalHook
var rentalAfterUpdateHooks []RentalHook
var rentalAfterDeleteHooks []RentalHook
var rentalAfterUpsertHooks []RentalHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Rental) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Rental) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Rental) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Rental) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Rental) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Rental) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Rental) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Rental) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Rental) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRentalHook registers your hook function for all future operations.
func AddRentalHook(hookPoint boil.HookPoint, rentalHook RentalHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rentalBeforeInsertHooks = append(rentalBeforeInsertHooks, rentalHook)
	case boil.BeforeUpdateHook:
		rentalBeforeUpdateHooks = append(rentalBeforeUpdateHooks, rentalHook)
	case boil.BeforeDeleteHook:
		rentalBeforeDeleteHooks = append(rentalBeforeDeleteHooks, rentalHook)
	case boil.BeforeUpsertHook:
		rentalBeforeUpsertHooks = append(rentalBeforeUpsertHooks, rentalHook)
	case boil.AfterInsertHook:
		rentalAfterInsertHooks = append(rentalAfterInsertHooks, rentalHook)
	case boil.AfterSelectHook:
		rentalAfterSelectHooks = append(rentalAfterSelectHooks, rentalHook)
	case boil.AfterUpdateHook:
		rentalAfterUpdateHooks = append(rentalAfterUpdateHooks, rentalHook)
	case boil.AfterDeleteHook:
		rentalAfterDeleteHooks = append(rentalAfterDeleteHooks, rentalHook)
	case boil.AfterUpsertHook:
		rentalAfterUpsertHooks = append(rentalAfterUpsertHooks, rentalHook)
	}
}

// OneP returns a single rental record from the query, and panics on error.
func (q rentalQuery) OneP() *Rental {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single rental record from the query.
func (q rentalQuery) One() (*Rental, error) {
	o := &Rental{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for rental")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Rental records from the query, and panics on error.
func (q rentalQuery) AllP() RentalSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Rental records from the query.
func (q rentalQuery) All() (RentalSlice, error) {
	var o []*Rental

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Rental slice")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Rental records in the query, and panics on error.
func (q rentalQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Rental records in the query.
func (q rentalQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count rental rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q rentalQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q rentalQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if rental exists")
	}

	return count > 0, nil
}

// CustomerG pointed to by the foreign key.
func (o *Rental) CustomerG(mods ...qm.QueryMod) customerQuery {
	return o.Customer(boil.GetDB(), mods...)
}

// Customer pointed to by the foreign key.
func (o *Rental) Customer(exec boil.Executor, mods ...qm.QueryMod) customerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("customer_id=?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	query := Customers(exec, queryMods...)
	queries.SetFrom(query.Query, "`customer`")

	return query
}

// InventoryG pointed to by the foreign key.
func (o *Rental) InventoryG(mods ...qm.QueryMod) inventoryQuery {
	return o.Inventory(boil.GetDB(), mods...)
}

// Inventory pointed to by the foreign key.
func (o *Rental) Inventory(exec boil.Executor, mods ...qm.QueryMod) inventoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("inventory_id=?", o.InventoryID),
	}

	queryMods = append(queryMods, mods...)

	query := Inventories(exec, queryMods...)
	queries.SetFrom(query.Query, "`inventory`")

	return query
}

// StaffG pointed to by the foreign key.
func (o *Rental) StaffG(mods ...qm.QueryMod) staffQuery {
	return o.Staff(boil.GetDB(), mods...)
}

// Staff pointed to by the foreign key.
func (o *Rental) Staff(exec boil.Executor, mods ...qm.QueryMod) staffQuery {
	queryMods := []qm.QueryMod{
		qm.Where("staff_id=?", o.StaffID),
	}

	queryMods = append(queryMods, mods...)

	query := Staffs(exec, queryMods...)
	queries.SetFrom(query.Query, "`staff`")

	return query
}

// PaymentsG retrieves all the payment's payment.
func (o *Rental) PaymentsG(mods ...qm.QueryMod) paymentQuery {
	return o.Payments(boil.GetDB(), mods...)
}

// Payments retrieves all the payment's payment with an executor.
func (o *Rental) Payments(exec boil.Executor, mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`payment`.`rental_id`=?", o.RentalID),
	)

	query := Payments(exec, queryMods...)
	queries.SetFrom(query.Query, "`payment`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`payment`.*"})
	}

	return query
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (rentalL) LoadCustomer(e boil.Executor, singular bool, maybeRental interface{}) error {
	var slice []*Rental
	var object *Rental

	count := 1
	if singular {
		object = maybeRental.(*Rental)
	} else {
		slice = *maybeRental.(*[]*Rental)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &rentalR{}
		}
		args[0] = object.CustomerID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &rentalR{}
			}
			args[i] = obj.CustomerID
		}
	}

	query := fmt.Sprintf(
		"select * from `customer` where `customer_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Customer")
	}
	defer results.Close()

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Customer")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Customer = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CustomerID == foreign.CustomerID {
				local.R.Customer = foreign
				break
			}
		}
	}

	return nil
}

// LoadInventory allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (rentalL) LoadInventory(e boil.Executor, singular bool, maybeRental interface{}) error {
	var slice []*Rental
	var object *Rental

	count := 1
	if singular {
		object = maybeRental.(*Rental)
	} else {
		slice = *maybeRental.(*[]*Rental)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &rentalR{}
		}
		args[0] = object.InventoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &rentalR{}
			}
			args[i] = obj.InventoryID
		}
	}

	query := fmt.Sprintf(
		"select * from `inventory` where `inventory_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Inventory")
	}
	defer results.Close()

	var resultSlice []*Inventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Inventory")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Inventory = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InventoryID == foreign.InventoryID {
				local.R.Inventory = foreign
				break
			}
		}
	}

	return nil
}

// LoadStaff allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (rentalL) LoadStaff(e boil.Executor, singular bool, maybeRental interface{}) error {
	var slice []*Rental
	var object *Rental

	count := 1
	if singular {
		object = maybeRental.(*Rental)
	} else {
		slice = *maybeRental.(*[]*Rental)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &rentalR{}
		}
		args[0] = object.StaffID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &rentalR{}
			}
			args[i] = obj.StaffID
		}
	}

	query := fmt.Sprintf(
		"select * from `staff` where `staff_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Staff")
	}
	defer results.Close()

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Staff")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Staff = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StaffID == foreign.StaffID {
				local.R.Staff = foreign
				break
			}
		}
	}

	return nil
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (rentalL) LoadPayments(e boil.Executor, singular bool, maybeRental interface{}) error {
	var slice []*Rental
	var object *Rental

	count := 1
	if singular {
		object = maybeRental.(*Rental)
	} else {
		slice = *maybeRental.(*[]*Rental)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &rentalR{}
		}
		args[0] = object.RentalID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &rentalR{}
			}
			args[i] = obj.RentalID
		}
	}

	query := fmt.Sprintf(
		"select * from `payment` where `rental_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment")
	}
	defer results.Close()

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Payments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RentalID == foreign.RentalID.Int {
				local.R.Payments = append(local.R.Payments, foreign)
				break
			}
		}
	}

	return nil
}

// SetCustomerG of the rental to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.Rentals.
// Uses the global database handle.
func (o *Rental) SetCustomerG(insert bool, related *Customer) error {
	return o.SetCustomer(boil.GetDB(), insert, related)
}

// SetCustomerP of the rental to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.Rentals.
// Panics on error.
func (o *Rental) SetCustomerP(exec boil.Executor, insert bool, related *Customer) {
	if err := o.SetCustomer(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCustomerGP of the rental to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.Rentals.
// Uses the global database handle and panics on error.
func (o *Rental) SetCustomerGP(insert bool, related *Customer) {
	if err := o.SetCustomer(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCustomer of the rental to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.Rentals.
func (o *Rental) SetCustomer(exec boil.Executor, insert bool, related *Customer) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `rental` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"customer_id"}),
		strmangle.WhereClause("`", "`", 0, rentalPrimaryKeyColumns),
	)
	values := []interface{}{related.CustomerID, o.RentalID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CustomerID = related.CustomerID

	if o.R == nil {
		o.R = &rentalR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &customerR{
			Rentals: RentalSlice{o},
		}
	} else {
		related.R.Rentals = append(related.R.Rentals, o)
	}

	return nil
}

// SetInventoryG of the rental to the related item.
// Sets o.R.Inventory to related.
// Adds o to related.R.Rentals.
// Uses the global database handle.
func (o *Rental) SetInventoryG(insert bool, related *Inventory) error {
	return o.SetInventory(boil.GetDB(), insert, related)
}

// SetInventoryP of the rental to the related item.
// Sets o.R.Inventory to related.
// Adds o to related.R.Rentals.
// Panics on error.
func (o *Rental) SetInventoryP(exec boil.Executor, insert bool, related *Inventory) {
	if err := o.SetInventory(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInventoryGP of the rental to the related item.
// Sets o.R.Inventory to related.
// Adds o to related.R.Rentals.
// Uses the global database handle and panics on error.
func (o *Rental) SetInventoryGP(insert bool, related *Inventory) {
	if err := o.SetInventory(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInventory of the rental to the related item.
// Sets o.R.Inventory to related.
// Adds o to related.R.Rentals.
func (o *Rental) SetInventory(exec boil.Executor, insert bool, related *Inventory) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `rental` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"inventory_id"}),
		strmangle.WhereClause("`", "`", 0, rentalPrimaryKeyColumns),
	)
	values := []interface{}{related.InventoryID, o.RentalID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InventoryID = related.InventoryID

	if o.R == nil {
		o.R = &rentalR{
			Inventory: related,
		}
	} else {
		o.R.Inventory = related
	}

	if related.R == nil {
		related.R = &inventoryR{
			Rentals: RentalSlice{o},
		}
	} else {
		related.R.Rentals = append(related.R.Rentals, o)
	}

	return nil
}

// SetStaffG of the rental to the related item.
// Sets o.R.Staff to related.
// Adds o to related.R.Rentals.
// Uses the global database handle.
func (o *Rental) SetStaffG(insert bool, related *Staff) error {
	return o.SetStaff(boil.GetDB(), insert, related)
}

// SetStaffP of the rental to the related item.
// Sets o.R.Staff to related.
// Adds o to related.R.Rentals.
// Panics on error.
func (o *Rental) SetStaffP(exec boil.Executor, insert bool, related *Staff) {
	if err := o.SetStaff(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStaffGP of the rental to the related item.
// Sets o.R.Staff to related.
// Adds o to related.R.Rentals.
// Uses the global database handle and panics on error.
func (o *Rental) SetStaffGP(insert bool, related *Staff) {
	if err := o.SetStaff(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStaff of the rental to the related item.
// Sets o.R.Staff to related.
// Adds o to related.R.Rentals.
func (o *Rental) SetStaff(exec boil.Executor, insert bool, related *Staff) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `rental` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"staff_id"}),
		strmangle.WhereClause("`", "`", 0, rentalPrimaryKeyColumns),
	)
	values := []interface{}{related.StaffID, o.RentalID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StaffID = related.StaffID

	if o.R == nil {
		o.R = &rentalR{
			Staff: related,
		}
	} else {
		o.R.Staff = related
	}

	if related.R == nil {
		related.R = &staffR{
			Rentals: RentalSlice{o},
		}
	} else {
		related.R.Rentals = append(related.R.Rentals, o)
	}

	return nil
}

// AddPaymentsG adds the given related objects to the existing relationships
// of the rental, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Rental appropriately.
// Uses the global database handle.
func (o *Rental) AddPaymentsG(insert bool, related ...*Payment) error {
	return o.AddPayments(boil.GetDB(), insert, related...)
}

// AddPaymentsP adds the given related objects to the existing relationships
// of the rental, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Rental appropriately.
// Panics on error.
func (o *Rental) AddPaymentsP(exec boil.Executor, insert bool, related ...*Payment) {
	if err := o.AddPayments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPaymentsGP adds the given related objects to the existing relationships
// of the rental, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Rental appropriately.
// Uses the global database handle and panics on error.
func (o *Rental) AddPaymentsGP(insert bool, related ...*Payment) {
	if err := o.AddPayments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPayments adds the given related objects to the existing relationships
// of the rental, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Rental appropriately.
func (o *Rental) AddPayments(exec boil.Executor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RentalID.Int = o.RentalID
			rel.RentalID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `payment` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"rental_id"}),
				strmangle.WhereClause("`", "`", 0, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.RentalID, rel.PaymentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RentalID.Int = o.RentalID
			rel.RentalID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &rentalR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Rental: o,
			}
		} else {
			rel.R.Rental = o
		}
	}
	return nil
}

// SetPaymentsG removes all previously related items of the
// rental replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rental's Payments accordingly.
// Replaces o.R.Payments with related.
// Sets related.R.Rental's Payments accordingly.
// Uses the global database handle.
func (o *Rental) SetPaymentsG(insert bool, related ...*Payment) error {
	return o.SetPayments(boil.GetDB(), insert, related...)
}

// SetPaymentsP removes all previously related items of the
// rental replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rental's Payments accordingly.
// Replaces o.R.Payments with related.
// Sets related.R.Rental's Payments accordingly.
// Panics on error.
func (o *Rental) SetPaymentsP(exec boil.Executor, insert bool, related ...*Payment) {
	if err := o.SetPayments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPaymentsGP removes all previously related items of the
// rental replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rental's Payments accordingly.
// Replaces o.R.Payments with related.
// Sets related.R.Rental's Payments accordingly.
// Uses the global database handle and panics on error.
func (o *Rental) SetPaymentsGP(insert bool, related ...*Payment) {
	if err := o.SetPayments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPayments removes all previously related items of the
// rental replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rental's Payments accordingly.
// Replaces o.R.Payments with related.
// Sets related.R.Rental's Payments accordingly.
func (o *Rental) SetPayments(exec boil.Executor, insert bool, related ...*Payment) error {
	query := "update `payment` set `rental_id` = null where `rental_id` = ?"
	values := []interface{}{o.RentalID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Payments {
			rel.RentalID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Rental = nil
		}

		o.R.Payments = nil
	}
	return o.AddPayments(exec, insert, related...)
}

// RemovePaymentsG relationships from objects passed in.
// Removes related items from R.Payments (uses pointer comparison, removal does not keep order)
// Sets related.R.Rental.
// Uses the global database handle.
func (o *Rental) RemovePaymentsG(related ...*Payment) error {
	return o.RemovePayments(boil.GetDB(), related...)
}

// RemovePaymentsP relationships from objects passed in.
// Removes related items from R.Payments (uses pointer comparison, removal does not keep order)
// Sets related.R.Rental.
// Panics on error.
func (o *Rental) RemovePaymentsP(exec boil.Executor, related ...*Payment) {
	if err := o.RemovePayments(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePaymentsGP relationships from objects passed in.
// Removes related items from R.Payments (uses pointer comparison, removal does not keep order)
// Sets related.R.Rental.
// Uses the global database handle and panics on error.
func (o *Rental) RemovePaymentsGP(related ...*Payment) {
	if err := o.RemovePayments(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePayments relationships from objects passed in.
// Removes related items from R.Payments (uses pointer comparison, removal does not keep order)
// Sets related.R.Rental.
func (o *Rental) RemovePayments(exec boil.Executor, related ...*Payment) error {
	var err error
	for _, rel := range related {
		rel.RentalID.Valid = false
		if rel.R != nil {
			rel.R.Rental = nil
		}
		if err = rel.Update(exec, "rental_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Payments {
			if rel != ri {
				continue
			}

			ln := len(o.R.Payments)
			if ln > 1 && i < ln-1 {
				o.R.Payments[i] = o.R.Payments[ln-1]
			}
			o.R.Payments = o.R.Payments[:ln-1]
			break
		}
	}

	return nil
}

// RentalsG retrieves all records.
func RentalsG(mods ...qm.QueryMod) rentalQuery {
	return Rentals(boil.GetDB(), mods...)
}

// Rentals retrieves all the records using an executor.
func Rentals(exec boil.Executor, mods ...qm.QueryMod) rentalQuery {
	mods = append(mods, qm.From("`rental`"))
	return rentalQuery{NewQuery(exec, mods...)}
}

// FindRentalG retrieves a single record by ID.
func FindRentalG(rentalID int, selectCols ...string) (*Rental, error) {
	return FindRental(boil.GetDB(), rentalID, selectCols...)
}

// FindRentalGP retrieves a single record by ID, and panics on error.
func FindRentalGP(rentalID int, selectCols ...string) *Rental {
	retobj, err := FindRental(boil.GetDB(), rentalID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRental retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRental(exec boil.Executor, rentalID int, selectCols ...string) (*Rental, error) {
	rentalObj := &Rental{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `rental` where `rental_id`=?", sel,
	)

	q := queries.Raw(exec, query, rentalID)

	err := q.Bind(rentalObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from rental")
	}

	return rentalObj, nil
}

// FindRentalP retrieves a single record by ID with an executor, and panics on error.
func FindRentalP(exec boil.Executor, rentalID int, selectCols ...string) *Rental {
	retobj, err := FindRental(exec, rentalID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Rental) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Rental) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Rental) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Rental) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no rental provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rentalColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	rentalInsertCacheMut.RLock()
	cache, cached := rentalInsertCache[key]
	rentalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			rentalColumns,
			rentalColumnsWithDefault,
			rentalColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(rentalType, rentalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rentalType, rentalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `rental` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `rental` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `rental` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, rentalPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into rental")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RentalID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == rentalMapping["RentalID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RentalID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for rental")
	}

CacheNoHooks:
	if !cached {
		rentalInsertCacheMut.Lock()
		rentalInsertCache[key] = cache
		rentalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Rental record. See Update for
// whitelist behavior description.
func (o *Rental) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Rental record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Rental) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Rental, and panics on error.
// See Update for whitelist behavior description.
func (o *Rental) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Rental.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Rental) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	rentalUpdateCacheMut.RLock()
	cache, cached := rentalUpdateCache[key]
	rentalUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			rentalColumns,
			rentalPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("sqlboiler: unable to update rental, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `rental` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, rentalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rentalType, rentalMapping, append(wl, rentalPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update rental row")
	}

	if !cached {
		rentalUpdateCacheMut.Lock()
		rentalUpdateCache[key] = cache
		rentalUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q rentalQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q rentalQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all for rental")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RentalSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RentalSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RentalSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RentalSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rentalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `rental` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rentalPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to update all in rental slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Rental) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Rental) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Rental) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Rental) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("sqlboiler: no rental provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rentalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rentalUpsertCacheMut.RLock()
	cache, cached := rentalUpsertCache[key]
	rentalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			rentalColumns,
			rentalColumnsWithDefault,
			rentalColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			rentalColumns,
			rentalPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert rental, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "rental", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `rental` WHERE `rental_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(rentalType, rentalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rentalType, rentalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for rental")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RentalID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == rentalMapping["RentalID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RentalID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for rental")
	}

CacheNoHooks:
	if !cached {
		rentalUpsertCacheMut.Lock()
		rentalUpsertCache[key] = cache
		rentalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Rental record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Rental) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Rental record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Rental) DeleteG() error {
	if o == nil {
		return errors.New("sqlboiler: no Rental provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Rental record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Rental) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Rental record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Rental) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Rental provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rentalPrimaryKeyMapping)
	sql := "DELETE FROM `rental` WHERE `rental_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete from rental")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q rentalQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q rentalQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("sqlboiler: no rentalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from rental")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RentalSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RentalSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("sqlboiler: no Rental slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RentalSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RentalSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("sqlboiler: no Rental slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(rentalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rentalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `rental` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rentalPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to delete all from rental slice")
	}

	if len(rentalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Rental) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Rental) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Rental) ReloadG() error {
	if o == nil {
		return errors.New("sqlboiler: no Rental provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Rental) Reload(exec boil.Executor) error {
	ret, err := FindRental(exec, o.RentalID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RentalSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RentalSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RentalSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("sqlboiler: empty RentalSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RentalSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	rentals := RentalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rentalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `rental`.* FROM `rental` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rentalPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&rentals)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in RentalSlice")
	}

	*o = rentals

	return nil
}

// RentalExists checks if the Rental row exists.
func RentalExists(exec boil.Executor, rentalID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `rental` where `rental_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, rentalID)
	}

	row := exec.QueryRow(sql, rentalID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if rental exists")
	}

	return exists, nil
}

// RentalExistsG checks if the Rental row exists.
func RentalExistsG(rentalID int) (bool, error) {
	return RentalExists(boil.GetDB(), rentalID)
}

// RentalExistsGP checks if the Rental row exists. Panics on error.
func RentalExistsGP(rentalID int) bool {
	e, err := RentalExists(boil.GetDB(), rentalID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RentalExistsP checks if the Rental row exists. Panics on error.
func RentalExistsP(exec boil.Executor, rentalID int) bool {
	e, err := RentalExists(exec, rentalID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
